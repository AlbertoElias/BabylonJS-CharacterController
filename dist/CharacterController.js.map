{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","actionMap","faceForward","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","Math","PI","this","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_actionMap","ActionMap","_cameraElastic","_cameraTarget","_noFirstPerson","_mode","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_skip","_move","_isAG","_hasAnims","setAvatar","console","error","_scene","setActionMap","_skeleton","_checkAnimRanges","_camera","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","getScene","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","walk","speed","setRunSpeed","run","setBackSpeed","walkBack","setBackFastSpeed","walkBackFast","setJumpSpeed","idleJump","runJump","setLeftSpeed","strafeLeft","setLeftFastSpeed","strafeLeftFast","setRightSpeed","strafeRight","setRightFastSpeed","setTurnSpeed","turnLeft","turnRight","setTurnFastSpeed","turnLeftFast","turnRightFast","setGravity","setAnimationGroups","agMap","exist","ag","stop","setAnimationRanges","arMap","actmapI","actDataI","keys","actDataO","ActionData","id","loop","rate","sound","log","_checkFastAnims","getActionMap","map","getSettings","ccs","CCSettings","isFaceForward","topDown","getMode","turningOff","isTurningOff","cameraTarget","clone","cameraElastic","gravity","keyboard","_ekb","noFirstPerson","setSettings","setFaceForward","setMode","setTurningOff","setCameraTarget","setCameraElasticity","enableKeyBoard","setNoFirstPerson","_setAnim","anim","rangeName","getAnimationRange","enableBlending","act","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","slideBack","setIdleAnim","idle","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","strafeRightFast","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","fall","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","b","v","copyFrom","cameraCollisionChanged","skel","f","_setRHS","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","_ff","_av2cam","_ffSign","checkAGs","start","reset","_updateTargetValue","registerBeforeRender","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","_avatar","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","beginAnimation","y","disp","forwardDist","jumpDist","rotation","alpha","_moveVector","normalize","scaleToRef","_calcJumpDist","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_walk","_stepLeft","_stepRight","_turnLeft","_turnRight","turnAngle","_walkback","_slp","_endFreeFall","_groundIt","_unGroundIt","addToRef","target","radius","lowerRadiusLimit","_snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","hit","newPos","pickedPoint","scale","nr","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","jump","isAg","_findSkel","_root","skeleton","ms","getChildMeshes","cm","tn","parent","rootNode","overrideMesh","getAvatar","setAvatarSkeleton","getSkeleton","ds","dk"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Node,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    Matrix\r\n} from \"babylonjs\"\r\nimport { Action } from \"babylonjs/Actions/action\";\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh;\r\n    private _skeleton: Skeleton;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n\r\n    private _actionMap: ActionMap = new ActionMap();\r\n\r\n    private _cameraElastic: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._actionMap.walk.speed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._actionMap.run.speed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._actionMap.walkBack.speed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._actionMap.walkBackFast.speed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._actionMap.idleJump.speed = n;\r\n        this._actionMap.runJump.speed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._actionMap.strafeLeft.speed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._actionMap.strafeRight.speed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._actionMap.turnLeft.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRight.speed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._actionMap.turnLeftFast.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRightFast.speed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n        this._isAG = true;\r\n        this.setActionMap(<ActionMap>agMap);\r\n    }\r\n\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        this.setActionMap(<ActionMap>arMap);\r\n    }\r\n\r\n    /**\r\n     * sets the action data.\r\n     * \r\n     * return \"ar\" or \"ag\" depending on if the data provided\r\n     * was animation range or animation group data respt.\r\n     * \r\n     * TODO should validate provided data.\r\n     * In other words if animation range provided make sure\r\n     * the range exist in the skeleton\r\n     * or if animation group provided make sure the animation group\r\n     * can be played on this avataor\r\n     * \r\n     * @param actmapI \r\n     * @returns \r\n     */\r\n    public setActionMap(actmapI: ActionMap): string {\r\n        let agMap: boolean = false;\r\n        let actDataI: ActionData;\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataO = this._actionMap[key];\r\n            if (!(actDataO instanceof ActionData)) continue;\r\n\r\n            actDataI = actmapI[actDataO.id];\r\n            actDataO.exist = false;\r\n            if (actDataI != null && actDataI.exist) {\r\n                this._hasAnims = true;\r\n                actDataO.exist = true;\r\n                if (actDataI instanceof AnimationGroup) {\r\n                    actDataO.ag = actDataI;\r\n                    actDataO.name = actDataO.ag.name\r\n                    agMap = true;\r\n                } else {\r\n                    if (actDataI instanceof Object) {\r\n                        if (actDataI.ag) {\r\n                            actDataO.ag = actDataI.ag;\r\n                            agMap = true;\r\n                        }\r\n                        if (actDataI.name) {\r\n                            actDataO.name = actDataI.name;\r\n                        }\r\n                        if (actDataI.loop != null) actDataO.loop = actDataI.loop;\r\n                        if (actDataI.rate) actDataO.rate = actDataI.rate;\r\n                        if (actDataI.speed) actDataO.speed = actDataI.speed;\r\n                        // if (actDataI.key) actDataO.key = actDataI.key;\r\n                        if (actDataI.sound) actDataO.sound = actDataI.sound;\r\n                    } else {\r\n                        actDataO.name = actDataI;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        console.log(this._actionMap);\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevAnim = null;\r\n        if (agMap) return \"ag\"; else return \"ar\";\r\n    }\r\n\r\n    public getActionMap(): ActionMap {\r\n        let map: ActionMap = new ActionMap();\r\n\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataI = this._actionMap[key];\r\n\r\n            if (!(actDataI instanceof ActionData)) continue;\r\n            if (!actDataI.exist) continue;\r\n\r\n            let actDataO: ActionData = map[actDataI.id];\r\n            actDataO.ag = actDataI.ag;\r\n            actDataO.name = actDataI.name;\r\n            actDataO.loop = actDataI.loop;\r\n            actDataO.rate = actDataI.rate;\r\n            actDataO.speed = actDataI.speed;\r\n            actDataO.key = actDataI.key;\r\n            actDataO.sound = actDataI.sound;\r\n            actDataO.exist = actDataI.exist;\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    public getSettings(): CCSettings {\r\n        let ccs: CCSettings = new CCSettings();\r\n        ccs.faceForward = this.isFaceForward();\r\n        ccs.topDown = this.getMode() == 1 ? true : false;\r\n        ccs.turningOff = this.isTurningOff();\r\n        ccs.cameraTarget = this._cameraTarget.clone();\r\n        ccs.cameraElastic = this._cameraElastic;\r\n        ccs.gravity = this._gravity;\r\n        ccs.keyboard = this._ekb;\r\n        ccs.maxSlopeLimit = this._maxSlopeLimit;\r\n        ccs.minSlopeLimit = this._minSlopeLimit;\r\n        ccs.noFirstPerson = this._noFirstPerson;\r\n        ccs.stepOffset = this._stepOffset;\r\n\r\n        return ccs;\r\n    }\r\n\r\n    public setSettings(ccs: CCSettings) {\r\n        this.setFaceForward(ccs.faceForward);\r\n        this.setMode(ccs.topDown ? 1 : 0);\r\n        this.setTurningOff(ccs.turningOff);\r\n        this.setCameraTarget(ccs.cameraTarget);\r\n        this.setCameraElasticity(ccs.cameraElastic);\r\n        this.setGravity(ccs.gravity);\r\n        this.enableKeyBoard(ccs.keyboard);\r\n        this.setSlopeLimit(ccs.minSlopeLimit, ccs.maxSlopeLimit);\r\n        this.setNoFirstPerson(ccs.noFirstPerson);\r\n        this.setStepOffset(ccs.stepOffset);\r\n\r\n    }\r\n\r\n\r\n\r\n    private _setAnim(anim: ActionData, rangeName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n\r\n        //aniamtion range need skeleton\r\n        if (!this._isAG && this._skeleton == null) return;\r\n\r\n        if (this._isAG) {\r\n            if (!(rangeName instanceof AnimationGroup)) return;\r\n            if (rangeName != null) {\r\n                anim.ag = <AnimationGroup>rangeName;\r\n                anim.exist = true;\r\n            }\r\n        } else {\r\n            if (this._skeleton.getAnimationRange(anim.name) != null) {\r\n                anim.exist = true;\r\n            } else {\r\n                anim.exist = false;\r\n                return;\r\n            }\r\n            if (rangeName != null) anim.name = <string>rangeName;\r\n        }\r\n\r\n        if (loop != null) anim.loop = loop;\r\n        if (rate != null) anim.rate = rate;\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let act = this._actionMap[key];\r\n                if (!(act instanceof ActionData)) continue;\r\n                if (act.exist) {\r\n                    let ar: AnimationGroup = act.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let anim = this._actionMap[key];\r\n                if (!(anim instanceof ActionData)) continue;\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._actionMap.walk.key = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._actionMap.walkBack.key = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._actionMap.turnLeft.key = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._actionMap.turnRight.key = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._actionMap.strafeLeft.key = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._actionMap.strafeRight.key = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._actionMap.idleJump.key = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._cameraElastic = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n    /**\r\n     * if av has the required anim (walk, run etc) then \r\n     * mark that anim as existing\r\n     * \r\n     * @param skel \r\n     */\r\n\r\n    private _checkAnimRanges(skel: Skeleton) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim.id) != null) {\r\n                    anim.name = anim.id;\r\n                    anim.exist = true;\r\n                    this._hasAnims = true;\r\n                }\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack)\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: ActionData, s: ActionData) {\r\n        if (f.exist) return;\r\n        if (!s.exist) return;\r\n        f.exist = true;\r\n        f.ag = s.ag;\r\n        f.name = s.name;\r\n        f.rate = s.rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private _mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this._mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    public getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n    public isTurningOff() {\r\n        return this._noRot;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign: number;\r\n    private _ff: boolean;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        this._ff = b;\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n    public isFaceForward() {\r\n        return this._ff;\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: ActionData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: ActionData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim.exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n                        //TODO use start instead of play ?\r\n                        //anim._ag.play(anim._loop);\r\n                        //anim._ag.speedRatio = anim._rate;\r\n                        anim.ag.start(anim.loop, anim.rate);\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim.name, anim.loop, anim.rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): ActionData {\r\n\r\n        let anim: ActionData = null;\r\n        anim = this._actionMap.runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let jumpDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._actionMap.run.speed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._actionMap.walk.speed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            jumpDist = this._calcJumpDist(this._actionMap.runJump.speed, dt);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            jumpDist = this._calcJumpDist(this._actionMap.idleJump.speed, dt);\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._actionMap.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._actionMap.fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _calcJumpDist(speed: number, dt: number): number {\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number = speed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        return jumpDist;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): ActionData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: ActionData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeLeft.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeLeftFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeRight.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeRightFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this._mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._actionMap.run.speed * dt;\r\n                        anim = this._actionMap.run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._actionMap.walk.speed * dt;\r\n                        anim = this._actionMap.walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._actionMap.walkBack.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.walkBackFast.speed * dt;\r\n                        anim = this._actionMap.walkBackFast;\r\n                    } else {\r\n                        anim = this._actionMap.walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this._mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._actionMap.turnLeft.speed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this._mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._actionMap.turnRight : this._actionMap.turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._actionMap.turnLeft : this._actionMap.turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._actionMap.turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._actionMap.turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this._mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _slp: number = this._verticalSlope(actDisp);\r\n                    if (_slp >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_slp > this._sl1) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._actionMap.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): ActionData {\r\n        if (this._grounded) {\r\n            return this._actionMap.idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: ActionData = this._actionMap.idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._actionMap.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._cameraElastic) this._snapCamera(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this._mode;\r\n                this._mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this._mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _skip: number = 0;\r\n    private _snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this._avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this._camera.checkCollisions) {\r\n                const newPos: Vector3 = this._camera.target.subtract(pi.pickedPoint).normalize().scale(this._cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this._camera.position);\r\n            } else {\r\n                const nr: number = pi.pickedPoint.subtract(this._camera.target).length();\r\n                this._camera.radius = nr - this._cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._actionMap.idleJump.key:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _ekb: boolean;\r\n    public enableKeyBoard(b: boolean) {\r\n        this._ekb = b;\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    public isAg() {\r\n        return this._isAG;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _findSkel(n: Node): Skeleton {\r\n        let root = this._root(n);\r\n\r\n        if (root instanceof Mesh && root.skeleton) return root.skeleton;\r\n\r\n        //find all child meshes which have skeletons\r\n        let ms = root.getChildMeshes(\r\n            false,\r\n            (cm) => {\r\n                if (cm instanceof Mesh) {\r\n                    if (cm.skeleton) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n        //return the skeleton of the first child mesh\r\n        if (ms.length > 0) return ms[0].skeleton; else return null;\r\n\r\n    }\r\n\r\n    private _root(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._root(tn.parent);\r\n    }\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false): boolean {\r\n\r\n        let rootNode = this._root(avatar);\r\n        if (rootNode instanceof Mesh) {\r\n            this._avatar = rootNode;\r\n        } else {\r\n            console.error(\"Cannot move this mesh. The root node of the mesh provided is not a mesh\");\r\n            return false;\r\n        }\r\n\r\n\r\n        this._skeleton = this._findSkel(avatar);\r\n        //skeletons animated by animation groups seem to have \"overrideMesh\" property\r\n        if (this._skeleton != null && this._skeleton.overrideMesh) this._isAG = true; else this._isAG = false;\r\n\r\n        this._actionMap.reset();\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAvatar() {\r\n        return this._avatar;\r\n    }\r\n\r\n    // force a skeleton to be the avatar skeleton\r\n    // should not be calling this normally\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n\r\n        //skeletons animated by animation groups seem to have \"overrideMesh\" property\r\n        if (this._skeleton != null && this._skeleton.overrideMesh) this._isAG = true; else this._isAG = false;\r\n\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n    }\r\n\r\n    public getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    // does this character have any animations ?\r\n    // remember we can use meshes without anims as characters too\r\n    private _hasAnims: boolean = false;\r\n\r\n    /**\r\n     * The avatar/character can be made up of multiple meshes arranged in a hierarchy.\r\n     * As such we will pick the root of the hierarchy as the avatar.\r\n     * The root should be a mesh as otherwise we cannot move it with moveWithCollision() method.\r\n     * \r\n     * Mutiple meshes in the hierarchy may have skeletons (if two or more meshes have skeleton then\r\n     * the skeleton will mostly likely be the same). \r\n     * So we will pick as avatar skeleton, the  skeleton of the first mesh in the hierachy which has\r\n     * a skeleton \r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param actionMap - maps actions to animations and other data like speed,sound etc\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, actionMap?: {}, faceForward = false) {\r\n\r\n        let success = this.setAvatar(avatar, faceForward);\r\n        if (!success) {\r\n            console.error(\"unable to set avatar\");\r\n        }\r\n\r\n        this._scene = scene;\r\n\r\n        let dataType: string = null;\r\n        if (actionMap != null) {\r\n            dataType = this.setActionMap(<ActionMap>actionMap);\r\n        }\r\n\r\n        //try to use the existing avatar animations\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n        //animation groups\r\n        if (this._isAG) {\r\n\r\n        }\r\n\r\n        this._camera = camera;\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\n\r\n\r\nclass _Action {\r\n\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n\r\nexport class ActionData {\r\n    public id: string;\r\n    public speed: number;\r\n    //_ds default speed.  speed is set to this on reset\r\n    public ds: number;\r\n    public sound: string;\r\n    public key: string;\r\n    //_dk defailt key\r\n    public dk: string;\r\n\r\n    //animation data\r\n    //if _ag is null then _name will be used to play animationrange\r\n    public name: string = \"\";\r\n    public ag: AnimationGroup;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n\r\n    public exist: boolean = false;\r\n\r\n    public constructor(id?: string, speed = 1, key?: string) {\r\n        this.id = id;\r\n        this.speed = speed;\r\n        this.ds = speed;\r\n        this.key = key;\r\n        this.dk = key;\r\n    }\r\n\r\n    public reset() {\r\n        this.name = \"\";\r\n        this.speed = this.ds;\r\n        this.key = this.dk;\r\n        this.loop = true;\r\n        this.rate = 1;\r\n        this.sound = \"\";\r\n        this.exist = false;\r\n    }\r\n\r\n}\r\n\r\nexport class ActionMap {\r\n    public walk = new ActionData(\"walk\", 3, \"w\");\r\n    public walkBack = new ActionData(\"walkBack\", 1.5, \"s\");\r\n    public walkBackFast = new ActionData(\"walkBackFast\", 3, \"na\");\r\n    public idle = new ActionData(\"idle\", 0, \"na\");\r\n    public idleJump = new ActionData(\"idleJump\", 6, \" \");\r\n    public run = new ActionData(\"run\", 6, \"na\");\r\n    public runJump = new ActionData(\"runJump\", 6, \"na\");\r\n    public fall = new ActionData(\"fall\", 0, \"na\");\r\n    public turnLeft = new ActionData(\"turnLeft\", Math.PI / 8, \"a\");\r\n    public turnLeftFast = new ActionData(\"turnLeftFast\", Math.PI / 4, \"na\");\r\n    public turnRight = new ActionData(\"turnRight\", Math.PI / 8, \"d\");\r\n    public turnRightFast = new ActionData(\"turnRightFast\", Math.PI / 4, \"na\");\r\n    public strafeLeft = new ActionData(\"strafeLeft\", 1.5, \"q\");\r\n    public strafeLeftFast = new ActionData(\"strafeLeftFast\", 3, \"na\");\r\n    public strafeRight = new ActionData(\"strafeRight\", 1.5, \"e\");\r\n    public strafeRightFast = new ActionData(\"strafeRightFast\", 3, \"na\");\r\n    public slideBack = new ActionData(\"slideBack\", 0, \"na\");\r\n\r\n    public reset() {\r\n        let keys: string[] = Object.keys(this);\r\n        for (let key of keys) {\r\n            let act = this[key];\r\n            if (!(act instanceof ActionData)) continue;\r\n            act.reset()\r\n        }\r\n    }\r\n};\r\n\r\nexport class CCSettings {\r\n    public faceForward: boolean;\r\n    public gravity: number;\r\n    public minSlopeLimit: number;\r\n    public maxSlopeLimit: number;\r\n    public stepOffset: number;\r\n    public cameraElastic: boolean = true;\r\n    public cameraTarget: Vector3 = Vector3.Zero();\r\n    public noFirstPerson: boolean = false;\r\n    public topDown: boolean = true;\r\n    //turningOff takes effect only when topDown is false\r\n    public turningOff: boolean = true;\r\n    public keyboard: boolean = true;\r\n}\r\n"],"sourceRoot":""}