{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","agMap","faceForward","_walkSpeed","_runSpeed","this","_backSpeed","_jumpSpeed","_leftSpeed","_rightSpeed","_turnSpeed","Math","PI","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_walk","_AnimData","_walkBack","_idle","_idleJump","_run","_runJump","_fall","_turnLeft","_turnRight","_strafeLeft","_strafeRight","_slideBack","_anims","_walkKey","_walkBackKey","_turnLeftKey","_turnRightKey","_strafeLeftKey","_strafeRightKey","_jumpKey","_elasticCamera","_cameraTarget","_noFirstPerson","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_skip","_move","_isAG","_hasAnims","_avatar","_setRHS","setFaceForward","_scene","setAnimationGroups","_skeleton","skeleton","checkAnims","_camera","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","setAvatar","setAvatarSkeleton","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","setRunSpeed","setBackSpeed","setJumpSpeed","setLeftSpeed","setRightSpeed","setTurnSpeed","setGravity","anim","_name","_ag","_exist","setAnimationRanges","arMap","arData","_loop","setAnim","rangeName","rate","loop","_rate","speedRatio","getAnimationRange","enableBlending","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","setRunAnim","setWalkBackAnim","setSlideBackAnim","setIdleAnim","setTurnRightAnim","setTurnLeftAnim","setStrafeRightAnim","setStrafeLeftAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","setCameraElasticity","b","setCameraTarget","v","copyFrom","cameraCollisionChanged","setNoFirstPerson","skel","setMode","setTurningOff","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","_av2cam","_ffSign","checkAGs","start","reset","_updateTargetValue","enableKeyBoard","registerBeforeRender","stop","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","play","beginAnimation","y","jumpDist","disp","forwardDist","rotation","alpha","_moveVector","clone","normalize","scaleToRef","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_stepLeft","_stepRight","turnAngle","_walkback","_endFreeFall","_groundIt","_unGroundIt","addToRef","target","radius","lowerRadiusLimit","_snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","hit","newPos","pickedPoint","scale","nr","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","walk","walkBack","run","turnLeft","turnRight","strafeLeft","strafeRight","jump","idle"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    Matrix\r\n} from \"babylonjs\"\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh;\r\n    private _skeleton: Skeleton;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n\r\n    //avatar speed in meters/second\r\n    private _walkSpeed: number = 3;\r\n    private _runSpeed: number = this._walkSpeed * 2;\r\n    private _backSpeed: number = this._walkSpeed / 2;\r\n    private _jumpSpeed: number = this._walkSpeed * 2;\r\n    private _leftSpeed: number = this._walkSpeed / 2;\r\n    private _rightSpeed: number = this._walkSpeed / 2;\r\n    //trun speed in radian per second (equivalent to 180 degree/second by default)\r\n    private _turnSpeed: number = Math.PI / 4;\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n    //animations\r\n    private _walk: _AnimData = new _AnimData(\"walk\");\r\n    private _walkBack: _AnimData = new _AnimData(\"walkBack\");\r\n    private _idle: _AnimData = new _AnimData(\"idle\");\r\n    private _idleJump: _AnimData = new _AnimData(\"idleJump\");\r\n    private _run: _AnimData = new _AnimData(\"run\");\r\n    private _runJump: _AnimData = new _AnimData(\"runJump\");\r\n    private _fall: _AnimData = new _AnimData(\"fall\");\r\n    private _turnLeft: _AnimData = new _AnimData(\"turnLeft\");\r\n    private _turnRight: _AnimData = new _AnimData(\"turnRight\");\r\n    private _strafeLeft: _AnimData = new _AnimData(\"strafeLeft\");\r\n    private _strafeRight: _AnimData = new _AnimData(\"strafeRight\");\r\n    private _slideBack: _AnimData = new _AnimData(\"slideBack\");\r\n\r\n    private _anims: _AnimData[] = [this._walk, this._walkBack, this._idle, this._idleJump, this._run, this._runJump, this._fall, this._turnLeft, this._turnRight, this._strafeLeft, this._strafeRight, this._slideBack];\r\n\r\n    //move keys\r\n    private _walkKey: string = \"w\";\r\n    private _walkBackKey: string = \"s\";\r\n    private _turnLeftKey: string = \"a\";\r\n    private _turnRightKey: string = \"d\";\r\n    private _strafeLeftKey: string = \"q\";\r\n    private _strafeRightKey: string = \"e\";\r\n    private _jumpKey: string = \" \";\r\n\r\n    private _elasticCamera: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n    public setAvatar(avatar: Mesh) {\r\n        this._avatar = avatar;\r\n    }\r\n\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n        this.checkAnims(skeleton);\r\n    }\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl = Math.PI * minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._walkSpeed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._runSpeed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._backSpeed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._jumpSpeed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._leftSpeed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._rightSpeed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._turnSpeed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        this._isAG = true;\r\n        for (let anim of this._anims) {\r\n            if (agMap[anim._name] != null) {\r\n                anim._ag = agMap[anim._name];\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        let arData: string | {};\r\n        for (let anim of this._anims) {\r\n            arData = arMap[anim._name];\r\n            if (arData != null) {\r\n                if (arData instanceof Object) {\r\n                    if (arData[\"name\"]) anim._name = arData[\"name\"];\r\n                    if (arData[\"loop\"]) anim._loop = arData[\"loop\"];\r\n                    if (arData[\"rate\"]) anim._loop = arData[\"rate\"];\r\n                } else {\r\n                    anim._name = arData;\r\n                }\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAnim(anim: _AnimData, rangeName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n        if (!this._isAG && this._skeleton == null) return;\r\n        if (loop != null) anim._loop = loop;\r\n        if (!this._isAG) {\r\n            if (rangeName != null) anim._name = <string>rangeName;\r\n            if (rate != null) anim._rate = rate;\r\n            if (this._skeleton.getAnimationRange(anim._name) != null) {\r\n                anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        } else {\r\n            if (rangeName != null) {\r\n                anim._ag = <AnimationGroup>rangeName;\r\n                anim._exist = true;\r\n            }\r\n            if (rate != null && anim._exist) {\r\n                anim._rate = rate;\r\n                anim._ag.speedRatio = rate;\r\n            }\r\n        }\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._walkBack, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._turnRight, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._turnLeft, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._strafeRight, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._strafeLeft, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this._fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._walkKey = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._walkBackKey = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._turnLeftKey = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._turnRightKey = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._strafeLeftKey = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._strafeRightKey = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._jumpKey = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._elasticCamera = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n\r\n    private checkAnims(skel: Skeleton) {\r\n        for (let anim of this._anims) {\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim._name) != null) anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this.mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        for (let anim of this._anims) {\r\n            if (agMap[anim._name] != null) {\r\n                anim._ag = agMap[anim._name];\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: _AnimData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: _AnimData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim._exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim._exist) this._prevAnim._ag.stop();\r\n                        anim._ag.play(anim._loop);\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim._name, anim._loop, anim._rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): _AnimData {\r\n\r\n        let anim: _AnimData = null;\r\n        anim = this._runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        const js: number = this._jumpSpeed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        const jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._runSpeed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._walkSpeed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): _AnimData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: _AnimData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    horizDist = this._leftSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = 2 * horizDist;\r\n                    }\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    horizDist = this._rightSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = 2 * horizDist;\r\n                    }\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this.mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._runSpeed * dt;\r\n                        anim = this._run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._walkSpeed * dt;\r\n                        anim = this._walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._backSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = 2 * horizDist;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    anim = this._walkBack;\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this.mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._turnSpeed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this.mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._turnRight : this._turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._turnLeft : this._turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this.mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _sl: number = this._verticalSlope(actDisp);\r\n                    if (_sl >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_sl > this._sl) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): _AnimData {\r\n        if (this._grounded) {\r\n            return this._idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: _AnimData = this._idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._elasticCamera) this._snapCamera(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this.mode;\r\n                this.mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this.mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _skip: number = 0;\r\n    private _snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this._avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this._camera.checkCollisions) {\r\n                const newPos: Vector3 = this._camera.target.subtract(pi.pickedPoint).normalize().scale(this._cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this._camera.position);\r\n            } else {\r\n                const nr: number = pi.pickedPoint.subtract(this._camera.target).length();\r\n                this._camera.radius = nr - this._cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._jumpKey:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n\r\n    // public disableKeyBoard() {\r\n    //     let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n    //     canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n    //     canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n    // }\r\n\r\n    public enableKeyBoard(b: boolean) {\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    private _hasAnims: boolean = false;\r\n    /**\r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param agMap map of animationRange name to animationRange\r\n\t * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, agMap?: {}, faceForward = false) {\r\n\r\n        this._avatar = avatar;\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        this._scene = scene;\r\n\r\n        if (agMap != null) {\r\n            this._isAG = true;\r\n            this.setAnimationGroups(agMap);\r\n        }\r\n\r\n        if (this._isAG || this._skeleton !== null) {\r\n            this._hasAnims = true;\r\n        }\r\n\r\n        if (!this._isAG) this._skeleton = avatar.skeleton;\r\n\r\n        if (!this._isAG && this._skeleton != null) this.checkAnims(this._skeleton);\r\n        this._camera = camera;\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\nclass _AnimData {\r\n    public _name: string;\r\n    public _loop: boolean = true;\r\n    public _rate: number = 1;\r\n    public _ag: AnimationGroup;\r\n    public _exist: boolean = false;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n}\r\n\r\nclass _Action {\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n"],"sourceRoot":""}