{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","actionMap","faceForward","_avatar","_skeleton","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","Math","PI","this","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_actionMap","ActionMap","_cameraElastic","_cameraTarget","_noFirstPerson","_mode","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_pickedMeshes","Array","_makeInvisible","_elasticSteps","_move","_isAG","_hasAnims","_camera","_scene","setAvatar","console","error","setActionMap","_checkAnimRanges","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","getScene","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","walk","speed","setRunSpeed","run","setBackSpeed","walkBack","setBackFastSpeed","walkBackFast","setJumpSpeed","idleJump","runJump","setLeftSpeed","strafeLeft","setLeftFastSpeed","strafeLeftFast","setRightSpeed","strafeRight","setRightFastSpeed","setTurnSpeed","turnLeft","turnRight","setTurnFastSpeed","turnLeftFast","turnRightFast","setGravity","setAnimationGroups","agMap","exist","ag","stop","setAnimationRanges","arMap","inActMap","inActData","keys","ccActionName","ccActData","ActionData","id","loop","rate","sound","_checkFastAnims","getActionMap","map","actDataI","actDataO","getSettings","ccs","CCSettings","isFaceForward","topDown","getMode","turningOff","isTurningOff","cameraTarget","clone","cameraElastic","elasticSteps","makeInvisble","gravity","keyboard","_ekb","noFirstPerson","setSettings","setFaceForward","setMode","setTurningOff","setCameraTarget","setCameraElasticity","setElasticiSteps","makeObstructionInvisible","enableKeyBoard","setNoFirstPerson","_setAnim","anim","animName","getAnimationRange","enableBlending","act","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","rangeName","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","slideBack","setIdleAnim","idle","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","strafeRightFast","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","fall","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","b","v","copyFrom","cameraCollisionChanged","skel","f","_setRHS","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","_ff","_av2cam","_ffSign","checkAGs","_containsAG","node","ags","fromRoot","_getRoot","getChildren","indexOf","target","tn","parent","start","reset","_updateTargetValue","registerBeforeRender","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","beginAnimation","y","disp","forwardDist","jumpDist","rotation","alpha","_moveVector","normalize","scaleToRef","_calcJumpDist","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_walk","_stepLeft","_stepRight","_turnLeft","_turnRight","turnAngle","_walkback","_slp","_endFreeFall","_groundIt","_unGroundIt","addToRef","radius","lowerRadiusLimit","_handleObstruction","visibility","subtractToRef","origin","direction","pis","multiPickWithRay","_prevPickedMeshes","pi","pickedMesh","isVisible","includes","push","pm","_isSeeAble","pp","pickedPoint","c2p","step","addInPlace","normalizeToNew","scaleInPlace","material","alphaMode","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","jump","isAg","_findSkel","_root","skeleton","ms","getChildMeshes","cm","rootNode","animationGroups","getAvatar","setAvatarSkeleton","_skelDrivenByAG","animations","some","sa","children","getSkeleton","ds","dk"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Node,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    TargetedAnimation,\r\n    Matrix,\r\n    DeepImmutable,\r\n    AbstractMesh,\r\n    PlaySoundAction,\r\n    InstancedMesh\r\n} from \"babylonjs\";\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh = null;;\r\n    private _skeleton: Skeleton = null;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n\r\n    private _actionMap: ActionMap = new ActionMap();\r\n\r\n    private _cameraElastic: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._actionMap.walk.speed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._actionMap.run.speed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._actionMap.walkBack.speed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._actionMap.walkBackFast.speed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._actionMap.idleJump.speed = n;\r\n        this._actionMap.runJump.speed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._actionMap.strafeLeft.speed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._actionMap.strafeRight.speed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._actionMap.turnLeft.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRight.speed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._actionMap.turnLeftFast.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRightFast.speed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n        this._isAG = true;\r\n        this.setActionMap(<ActionMap>agMap);\r\n    }\r\n\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        this.setActionMap(<ActionMap>arMap);\r\n    }\r\n\r\n    /**\r\n     * updates action data in the cc actionMap\r\n     * with action data from the provided/input actionMap \r\n     * \r\n     * \r\n     * return \"ar\" or \"ag\" depending on if the data provided\r\n     * was animation range or animation group data respt.\r\n     * \r\n     * TODO should validate provided data.\r\n     * In other words if animation range provided make sure\r\n     * the range exist in the skeleton\r\n     * or if animation group provided make sure the animation group\r\n     * can be played on this avataor\r\n     * \r\n     * @param inActMap \r\n     * @returns \r\n     */\r\n    public setActionMap(inActMap: ActionMap): string {\r\n        let agMap: boolean = false;\r\n        let inActData: ActionData;\r\n\r\n\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.exist = false;\r\n\r\n            inActData = inActMap[ccActData.id];\r\n            //in previous version of cc the key value was AnimationGroup rather than ActionData\r\n            //lets accomodate that for backward compatibility\r\n            if (inActData != null) {\r\n                if (inActData instanceof AnimationGroup) {\r\n                    ccActData.ag = inActData;\r\n                    ccActData.name = ccActData.ag.name;\r\n                    ccActData.exist = true;\r\n                    agMap = true;\r\n                    this._hasAnims = true;\r\n                } else if (inActData.exist) {\r\n                    this._hasAnims = true;\r\n                    ccActData.exist = true;\r\n                    if (inActData instanceof Object) {\r\n                        if (inActData.ag) {\r\n                            ccActData.ag = inActData.ag;\r\n                            agMap = true;\r\n                        }\r\n                        if (inActData.name) {\r\n                            ccActData.name = inActData.name;\r\n                        }\r\n                        if (inActData.loop != null) ccActData.loop = inActData.loop;\r\n                        if (inActData.rate) ccActData.rate = inActData.rate;\r\n                        if (inActData.speed) ccActData.speed = inActData.speed;\r\n                        // if (actDataI.key) actDataO.key = actDataI.key;\r\n                        if (inActData.sound) ccActData.sound = inActData.sound;\r\n                    } else {\r\n                        ccActData.name = inActData;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevAnim = null;\r\n        if (agMap) return \"ag\"; else return \"ar\";\r\n    }\r\n\r\n    public getActionMap(): ActionMap {\r\n        let map: ActionMap = new ActionMap();\r\n\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataI = this._actionMap[key];\r\n\r\n            if (!(actDataI instanceof ActionData)) continue;\r\n            if (!actDataI.exist) continue;\r\n\r\n            let actDataO: ActionData = map[actDataI.id];\r\n            actDataO.ag = actDataI.ag;\r\n            actDataO.name = actDataI.name;\r\n            actDataO.loop = actDataI.loop;\r\n            actDataO.rate = actDataI.rate;\r\n            actDataO.speed = actDataI.speed;\r\n            actDataO.key = actDataI.key;\r\n            actDataO.sound = actDataI.sound;\r\n            actDataO.exist = actDataI.exist;\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    public getSettings(): CCSettings {\r\n        let ccs: CCSettings = new CCSettings();\r\n        ccs.faceForward = this.isFaceForward();\r\n        ccs.topDown = this.getMode() == 1 ? true : false;\r\n        ccs.turningOff = this.isTurningOff();\r\n        ccs.cameraTarget = this._cameraTarget.clone();\r\n        ccs.cameraElastic = this._cameraElastic;\r\n        ccs.elasticSteps = this._elasticSteps;\r\n        ccs.makeInvisble = this._makeInvisible;\r\n        ccs.gravity = this._gravity;\r\n        ccs.keyboard = this._ekb;\r\n        ccs.maxSlopeLimit = this._maxSlopeLimit;\r\n        ccs.minSlopeLimit = this._minSlopeLimit;\r\n        ccs.noFirstPerson = this._noFirstPerson;\r\n        ccs.stepOffset = this._stepOffset;\r\n\r\n        return ccs;\r\n    }\r\n\r\n    public setSettings(ccs: CCSettings) {\r\n        this.setFaceForward(ccs.faceForward);\r\n        this.setMode(ccs.topDown ? 1 : 0);\r\n        this.setTurningOff(ccs.turningOff);\r\n        this.setCameraTarget(ccs.cameraTarget);\r\n        this.setCameraElasticity(ccs.cameraElastic);\r\n        this.setElasticiSteps(ccs.elasticSteps);\r\n        this.makeObstructionInvisible(ccs.makeInvisble);\r\n        this.setGravity(ccs.gravity);\r\n        this.enableKeyBoard(ccs.keyboard);\r\n        this.setSlopeLimit(ccs.minSlopeLimit, ccs.maxSlopeLimit);\r\n        this.setNoFirstPerson(ccs.noFirstPerson);\r\n        this.setStepOffset(ccs.stepOffset);\r\n\r\n    }\r\n\r\n    private _setAnim(anim: ActionData, animName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n\r\n        //animation range need skeleton\r\n        if (!this._isAG && this._skeleton == null) return;\r\n\r\n        if (animName != null) {\r\n            if (this._isAG) {\r\n                if (!(animName instanceof AnimationGroup)) return;\r\n                anim.ag = <AnimationGroup>animName;\r\n                anim.exist = true;\r\n            } else {\r\n                if (this._skeleton.getAnimationRange(anim.name) != null) {\r\n                    anim.name = <string>animName;\r\n                    anim.exist = true;\r\n                } else {\r\n                    anim.exist = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loop != null) anim.loop = loop;\r\n        if (rate != null) anim.rate = rate;\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let act = this._actionMap[key];\r\n                if (!(act instanceof ActionData)) continue;\r\n                if (act.exist) {\r\n                    let ar: AnimationGroup = act.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this._skeleton !== null)\r\n                this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let anim = this._actionMap[key];\r\n                if (!(anim instanceof ActionData)) continue;\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._actionMap.walk.key = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._actionMap.walkBack.key = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._actionMap.turnLeft.key = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._actionMap.turnRight.key = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._actionMap.strafeLeft.key = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._actionMap.strafeRight.key = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._actionMap.idleJump.key = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._cameraElastic = b;\r\n    }\r\n\r\n    public setElasticiSteps(n: number) {\r\n        this._elasticSteps = n;\r\n    }\r\n\r\n    public makeObstructionInvisible(b: boolean) {\r\n        this._makeInvisible = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n    /**\r\n     * if av has the required anim (walk, run etc) then \r\n     * mark that anim as existing\r\n     * \r\n     * @param skel \r\n     */\r\n\r\n    private _checkAnimRanges(skel: Skeleton) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim.id) != null) {\r\n                    anim.name = anim.id;\r\n                    anim.exist = true;\r\n                    this._hasAnims = true;\r\n                }\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack)\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: ActionData, s: ActionData) {\r\n        if (f.exist) return;\r\n        if (!s.exist) return;\r\n        f.exist = true;\r\n        f.ag = s.ag;\r\n        f.name = s.name;\r\n        f.rate = s.rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private _mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this._mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    public getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n    public isTurningOff() {\r\n        return this._noRot;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(<DeepImmutable<Float32Array>>meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign: number;\r\n    private _ff: boolean;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        this._ff = b;\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n    public isFaceForward() {\r\n        return this._ff;\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if any of the mesh on the node tree is refrenced by any animation group\r\n    private _containsAG(node: Node, ags: AnimationGroup[], fromRoot: boolean) {\r\n        let r: Node;\r\n        let ns: Node[];\r\n\r\n        if (fromRoot) {\r\n            r = this._getRoot(node);\r\n            ns = r.getChildren((n) => { return (n instanceof TransformNode) }, false);\r\n        } else {\r\n            r = node;\r\n            ns = [r];\r\n        }\r\n\r\n        for (let ag of ags) {\r\n            let tas: TargetedAnimation[] = ag.targetedAnimations;\r\n            for (let ta of tas) {\r\n                if (ns.indexOf(ta.target) > -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //get the root of Node\r\n    private _getRoot(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._getRoot(tn.parent);\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: ActionData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: ActionData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim.exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim.exist) this._prevAnim.ag.stop();\r\n                        //TODO use start instead of play ?\r\n                        //anim._ag.play(anim._loop);\r\n                        //anim._ag.speedRatio = anim._rate;\r\n                        anim.ag.start(anim.loop, anim.rate);\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim.name, anim.loop, anim.rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): ActionData {\r\n\r\n        let anim: ActionData = null;\r\n        anim = this._actionMap.runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let jumpDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._actionMap.run.speed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._actionMap.walk.speed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            jumpDist = this._calcJumpDist(this._actionMap.runJump.speed, dt);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            jumpDist = this._calcJumpDist(this._actionMap.idleJump.speed, dt);\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._actionMap.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._actionMap.fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _calcJumpDist(speed: number, dt: number): number {\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number = speed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        return jumpDist;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): ActionData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: ActionData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeLeft.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeLeftFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeRight.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeRightFast.speed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this._mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._actionMap.run.speed * dt;\r\n                        anim = this._actionMap.run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._actionMap.walk.speed * dt;\r\n                        anim = this._actionMap.walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._actionMap.walkBack.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.walkBackFast.speed * dt;\r\n                        anim = this._actionMap.walkBackFast;\r\n                    } else {\r\n                        anim = this._actionMap.walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this._mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._actionMap.turnLeft.speed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this._mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._actionMap.turnRight : this._actionMap.turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._actionMap.turnLeft : this._actionMap.turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._actionMap.turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._actionMap.turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this._mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _slp: number = this._verticalSlope(actDisp);\r\n                    if (_slp >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_slp > this._sl1) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._actionMap.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): ActionData {\r\n        if (this._grounded) {\r\n            return this._actionMap.idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: ActionData = this._actionMap.idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._actionMap.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._cameraElastic || this._makeInvisible) this._handleObstruction(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this._mode;\r\n                this._mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this._mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _prevPickedMeshes: AbstractMesh[];\r\n    private _pickedMeshes: AbstractMesh[] = new Array();;\r\n    private _makeInvisible = false;\r\n    private _elasticSteps = 50;\r\n    private _alreadyInvisible: AbstractMesh[];\r\n\r\n    /**\r\n     * The following method handles the use case wherein some mesh\r\n     * comes between the avatar and the camera thus obstructing the view\r\n     * of the avatar.\r\n     * Two ways this can be handled\r\n     * a) make the obstructing  mesh invisible\r\n     *   instead of invisible a better option would have been to make semi transparent.\r\n     *   Unfortunately, unlike mesh, mesh instances do not \"visibility\" setting)\r\n     *   Every alternate frame make mesh visible and invisible to give the impression of semi-transparent.\r\n     * b) move the camera in front of the obstructing mesh\r\n     */\r\n    private _handleObstruction() {\r\n\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pis: PickingInfo[] = this._scene.multiPickWithRay(this._ray, (mesh) => {\r\n            if (mesh == this._avatar) return false;\r\n            else return true;\r\n        });\r\n\r\n\r\n        if (this._makeInvisible) {\r\n            this._prevPickedMeshes = this._pickedMeshes;\r\n            if (pis.length > 0) {\r\n                this._pickedMeshes = new Array();\r\n                for (let pi of pis) {\r\n                    if (pi.pickedMesh.isVisible || this._prevPickedMeshes.includes(pi.pickedMesh)) {\r\n                        pi.pickedMesh.isVisible = false;\r\n                        this._pickedMeshes.push(pi.pickedMesh);\r\n                    }\r\n                }\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    if (!this._pickedMeshes.includes(pm)) {\r\n                        pm.isVisible = true;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    pm.isVisible = true;\r\n                }\r\n                this._prevPickedMeshes.length = 0;\r\n            }\r\n        }\r\n\r\n        if (this._cameraElastic) {\r\n            if (pis.length > 0) {\r\n                // postion the camera in front of the mesh that is obstructing camera\r\n\r\n                //if only one obstruction and it is invisible then if it is not collidable or our camera is not collidable then do nothing\r\n                if ((pis.length == 1 && !this._isSeeAble(pis[0].pickedMesh)) && (!pis[0].pickedMesh.checkCollisions || !this._camera.checkCollisions)) return;\r\n\r\n                //if our camera is collidable then we donot want it to get stuck behind another collidable obsrtucting mesh\r\n                let pp: Vector3 = null;\r\n\r\n                //we will asume the order of picked meshes is from closest to avatar to furthest\r\n                //we should get the first one which is visible or invisible and collidable\r\n                for (let i = 0; i < pis.length; i++) {\r\n                    let pm = pis[i].pickedMesh;\r\n                    if (this._isSeeAble(pm)) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    } else if (pm.checkCollisions) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pp == null) return;\r\n\r\n                const c2p: Vector3 = this._camera.position.subtract(pp);\r\n                //note that when camera is collidable, changing the orbital camera radius may not work.\r\n                //changing the radius moves the camera forward (with collision?) and collision can interfere with movement\r\n                //\r\n                //in every cylce we are dividing the distance to tarvel by same number of steps.\r\n                //as we get closer to destination the speed will thus slow down.\r\n                //when just 1 unit distance left, lets snap to the final position.\r\n                //when calculating final position make sure the camera does not get stuck at the pickposition especially\r\n                //if collision is on\r\n\r\n                const l: number = c2p.length();\r\n                if (this._camera.checkCollisions) {\r\n                    let step: Vector3;\r\n                    if (l <= 1) {\r\n                        step = c2p.addInPlace(c2p.normalizeToNew().scaleInPlace(this._cameraSkin));\r\n                    } else {\r\n                        step = c2p.normalize().scaleInPlace(l / this._elasticSteps);\r\n                    }\r\n                    this._camera.position = this._camera.position.subtract(step);\r\n                } else {\r\n                    let step: number;\r\n                    if (l <= 1) step = l + this._cameraSkin; else step = l / this._elasticSteps;\r\n                    this._camera.radius = this._camera.radius - (step);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //how many ways can a mesh be invisible?\r\n    private _isSeeAble(mesh: AbstractMesh): boolean {\r\n        if (!mesh.isVisible) return false;\r\n        if (mesh.visibility == 0) return false;\r\n        if (mesh.material != null && mesh.material.alphaMode != 0 && mesh.material.alpha == 0) return false;\r\n        return true;\r\n        //what about vertex color? groan!\r\n    }\r\n\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._actionMap.idleJump.key:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _ekb: boolean;\r\n    public enableKeyBoard(b: boolean) {\r\n        this._ekb = b;\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    public isAg() {\r\n        return this._isAG;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _findSkel(n: Node): Skeleton {\r\n        let root = this._root(n);\r\n\r\n        if (root instanceof Mesh && root.skeleton) return root.skeleton;\r\n\r\n        //find all child meshes which have skeletons\r\n        let ms = root.getChildMeshes(\r\n            false,\r\n            (cm) => {\r\n                if (cm instanceof Mesh) {\r\n                    if (cm.skeleton) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n        //return the skeleton of the first child mesh\r\n        if (ms.length > 0) return ms[0].skeleton; else return null;\r\n\r\n    }\r\n\r\n    private _root(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._root(tn.parent);\r\n    }\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false): boolean {\r\n\r\n        let rootNode = this._root(avatar);\r\n        if (rootNode instanceof Mesh) {\r\n            this._avatar = rootNode;\r\n        } else {\r\n            console.error(\"Cannot move this mesh. The root node of the mesh provided is not a mesh\");\r\n            return false;\r\n        }\r\n\r\n        this._skeleton = this._findSkel(avatar);\r\n        this._isAG = this._containsAG(avatar, this._scene.animationGroups, true);\r\n\r\n        this._actionMap.reset();\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAvatar() {\r\n        return this._avatar;\r\n    }\r\n\r\n    // force a skeleton to be the avatar skeleton\r\n    // should not be calling this normally\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n\r\n\r\n        if (this._skeleton != null && this._skelDrivenByAG(skeleton)) this._isAG = true; else this._isAG = false;\r\n\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n    }\r\n\r\n\r\n    // this check if any of this skeleton animations is referenced by any targetedAnimation in any of the animationgroup in the scene.\r\n    private _skelDrivenByAG(skeleton: Skeleton) {\r\n        return skeleton.animations.some(sa => this._scene.animationGroups.some(ag => ag.children.some(ta => ta.animation == sa)));\r\n    }\r\n\r\n    public getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    // does this character have any animations ?\r\n    // remember we can use meshes without anims as characters too\r\n    private _hasAnims: boolean = false;\r\n\r\n    /**\r\n     * The avatar/character can be made up of multiple meshes arranged in a hierarchy.\r\n     * As such we will pick the root of the hierarchy as the avatar.\r\n     * The root should be a mesh as otherwise we cannot move it with moveWithCollision() method.\r\n     * \r\n     * Mutiple meshes in the hierarchy may have skeletons (if two or more meshes have skeleton then\r\n     * the skeleton will mostly likely be the same). \r\n     * So we will pick as avatar skeleton, the  skeleton of the first mesh in the hierachy which has\r\n     * a skeleton \r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param actionMap/animationGroupMap \r\n     *        maps actions to animations and other data like speed,sound etc \r\n     *        or \r\n     *        for backward compatibility could be AnimationGroup Map\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, actionMap?: {}, faceForward = false) {\r\n\r\n        this._camera = camera;\r\n        this._scene = scene;\r\n\r\n        let success = this.setAvatar(avatar, faceForward);\r\n        if (!success) {\r\n            console.error(\"unable to set avatar\");\r\n        }\r\n\r\n\r\n        let dataType: string = null;\r\n        if (actionMap != null) {\r\n            dataType = this.setActionMap(<ActionMap>actionMap);\r\n        }\r\n\r\n        //try to use the existing avatar animations\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n        //animation groups\r\n        if (this._isAG) {\r\n            //TODO\r\n        }\r\n\r\n\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\n\r\n\r\nclass _Action {\r\n\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n\r\nexport class ActionData {\r\n    public id: string;\r\n    public speed: number;\r\n    //_ds default speed.  speed is set to this on reset\r\n    public ds: number;\r\n    public sound: string;\r\n    public key: string;\r\n    //_dk defailt key\r\n    public dk: string;\r\n\r\n    //animation data\r\n    //if _ag is null then assuming animation range and use _name to play animationrange\r\n    public name: string = \"\";\r\n    public ag: AnimationGroup;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n\r\n    public exist: boolean = false;\r\n\r\n    public constructor(id?: string, speed = 1, key?: string) {\r\n        this.id = id;\r\n        this.speed = speed;\r\n        this.ds = speed;\r\n        this.key = key;\r\n        this.dk = key;\r\n    }\r\n\r\n    public reset() {\r\n        this.name = \"\";\r\n        this.speed = this.ds;\r\n        this.key = this.dk;\r\n        this.loop = true;\r\n        this.rate = 1;\r\n        this.sound = \"\";\r\n        this.exist = false;\r\n    }\r\n\r\n}\r\n\r\n//not really a \"Map\"\r\nexport class ActionMap {\r\n    public walk = new ActionData(\"walk\", 3, \"w\");\r\n    public walkBack = new ActionData(\"walkBack\", 1.5, \"s\");\r\n    public walkBackFast = new ActionData(\"walkBackFast\", 3, \"na\");\r\n    public idle = new ActionData(\"idle\", 0, \"na\");\r\n    public idleJump = new ActionData(\"idleJump\", 6, \" \");\r\n    public run = new ActionData(\"run\", 6, \"na\");\r\n    public runJump = new ActionData(\"runJump\", 6, \"na\");\r\n    public fall = new ActionData(\"fall\", 0, \"na\");\r\n    public turnLeft = new ActionData(\"turnLeft\", Math.PI / 8, \"a\");\r\n    public turnLeftFast = new ActionData(\"turnLeftFast\", Math.PI / 4, \"na\");\r\n    public turnRight = new ActionData(\"turnRight\", Math.PI / 8, \"d\");\r\n    public turnRightFast = new ActionData(\"turnRightFast\", Math.PI / 4, \"na\");\r\n    public strafeLeft = new ActionData(\"strafeLeft\", 1.5, \"q\");\r\n    public strafeLeftFast = new ActionData(\"strafeLeftFast\", 3, \"na\");\r\n    public strafeRight = new ActionData(\"strafeRight\", 1.5, \"e\");\r\n    public strafeRightFast = new ActionData(\"strafeRightFast\", 3, \"na\");\r\n    public slideBack = new ActionData(\"slideBack\", 0, \"na\");\r\n\r\n    public reset() {\r\n        let keys: string[] = Object.keys(this);\r\n        for (let key of keys) {\r\n            let act = this[key];\r\n            if (!(act instanceof ActionData)) continue;\r\n            act.reset()\r\n        }\r\n    }\r\n};\r\n\r\nexport class CCSettings {\r\n    public faceForward: boolean;\r\n    public gravity: number;\r\n    public minSlopeLimit: number;\r\n    public maxSlopeLimit: number;\r\n    public stepOffset: number;\r\n    public cameraElastic: boolean = true;\r\n    public elasticSteps: number;\r\n    public makeInvisble: boolean = true;\r\n    public cameraTarget: Vector3 = Vector3.Zero();\r\n    public noFirstPerson: boolean = false;\r\n    public topDown: boolean = true;\r\n    //turningOff takes effect only when topDown is false\r\n    public turningOff: boolean = true;\r\n    public keyboard: boolean = true;\r\n}\r\n"],"sourceRoot":""}