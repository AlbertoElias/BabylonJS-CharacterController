{"version":3,"file":"CharacterController.js","mappings":"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","sources":["webpack://babylonjs-charactercontroller/webpack/universalModuleDefinition","webpack://babylonjs-charactercontroller/external umd {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack://babylonjs-charactercontroller/webpack/bootstrap","webpack://babylonjs-charactercontroller/webpack/runtime/compat get default export","webpack://babylonjs-charactercontroller/webpack/runtime/define property getters","webpack://babylonjs-charactercontroller/webpack/runtime/hasOwnProperty shorthand","webpack://babylonjs-charactercontroller/webpack/runtime/make namespace object","webpack://babylonjs-charactercontroller/./src/CharacterController.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__247__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__247__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Node,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    TargetedAnimation,\r\n    Matrix,\r\n    DeepImmutable,\r\n    AbstractMesh,\r\n    PlaySoundAction,\r\n    InstancedMesh,\r\n    Sound,\r\n    AnimationRange,\r\n    Animatable,\r\n    AnimationEvent\r\n} from \"babylonjs\";\r\n\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh = null;;\r\n    private _skeleton: Skeleton = null;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n\r\n    private _actionMap: ActionMap = new ActionMap();\r\n\r\n    private _cameraElastic: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._actionMap.walk.speed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._actionMap.run.speed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._actionMap.walkBack.speed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._actionMap.walkBackFast.speed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._actionMap.idleJump.speed = n;\r\n        this._actionMap.runJump.speed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._actionMap.strafeLeft.speed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._actionMap.strafeRight.speed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._actionMap.turnLeft.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRight.speed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._actionMap.turnLeftFast.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRightFast.speed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevActData != null && this._prevActData.exist) this._prevActData.ag.stop();\r\n        this._isAG = true;\r\n        this.setActionMap(<ActionMap>agMap);\r\n    }\r\n\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        this.setActionMap(<ActionMap>arMap);\r\n    }\r\n\r\n    /**\r\n     * updates action data in the cc actionMap\r\n     * with action data from the provided/input actionMap \r\n     * \r\n     * \r\n     * return \"ar\" or \"ag\" depending on if the data provided\r\n     * was animation range or animation group data respt.\r\n     * \r\n     * TODO should validate provided data.\r\n     * In other words if animation range provided make sure\r\n     * the range exist in the skeleton\r\n     * or if animation group provided make sure the animation group\r\n     * can be played on this avataor\r\n     * \r\n     * @param inActMap \r\n     * @returns \r\n     */\r\n    public setActionMap(inActMap: ActionMap): string {\r\n        let agMap: boolean = false;\r\n        let inActData: ActionData;\r\n\r\n\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.exist = false;\r\n\r\n            inActData = inActMap[ccActData.id];\r\n            //in previous version of cc the key value was AnimationGroup rather than ActionData\r\n            //lets accomodate that for backward compatibility\r\n            if (inActData != null) {\r\n                if (inActData instanceof AnimationGroup) {\r\n                    ccActData.ag = inActData;\r\n                    ccActData.name = ccActData.ag.name;\r\n                    ccActData.exist = true;\r\n                    agMap = true;\r\n                    this._hasAnims = true;\r\n                } else if (inActData.exist) {\r\n                    this._hasAnims = true;\r\n                    ccActData.exist = true;\r\n                    if (inActData instanceof Object) {\r\n                        if (inActData.ag) {\r\n                            ccActData.ag = inActData.ag;\r\n                            agMap = true;\r\n                        }\r\n                        if (inActData.name) {\r\n                            ccActData.name = inActData.name;\r\n                        }\r\n                        if (inActData.loop != null) ccActData.loop = inActData.loop;\r\n                        if (inActData.rate) ccActData.rate = inActData.rate;\r\n                        if (inActData.speed) ccActData.speed = inActData.speed;\r\n                        // if (actDataI.key) actDataO.key = actDataI.key;\r\n                        if (inActData.sound) ccActData.sound = inActData.sound;\r\n                    } else {\r\n                        ccActData.name = inActData;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevActData = null;\r\n        if (agMap) return \"ag\"; else return \"ar\";\r\n    }\r\n\r\n    public getActionMap(): ActionMap {\r\n        let map: ActionMap = new ActionMap();\r\n\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataI = this._actionMap[key];\r\n\r\n            if (!(actDataI instanceof ActionData)) continue;\r\n            if (!actDataI.exist) continue;\r\n\r\n            let actDataO: ActionData = map[actDataI.id];\r\n            actDataO.ag = actDataI.ag;\r\n            actDataO.name = actDataI.name;\r\n            actDataO.loop = actDataI.loop;\r\n            actDataO.rate = actDataI.rate;\r\n            actDataO.speed = actDataI.speed;\r\n            actDataO.key = actDataI.key;\r\n            actDataO.sound = actDataI.sound;\r\n            actDataO.exist = actDataI.exist;\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    public getSettings(): CCSettings {\r\n        let ccs: CCSettings = new CCSettings();\r\n        ccs.faceForward = this.isFaceForward();\r\n        ccs.topDown = this.getMode() == 1 ? true : false;\r\n        ccs.turningOff = this.isTurningOff();\r\n        ccs.cameraTarget = this._cameraTarget.clone();\r\n        ccs.cameraElastic = this._cameraElastic;\r\n        ccs.elasticSteps = this._elasticSteps;\r\n        ccs.makeInvisble = this._makeInvisible;\r\n        ccs.gravity = this._gravity;\r\n        ccs.keyboard = this._ekb;\r\n        ccs.maxSlopeLimit = this._maxSlopeLimit;\r\n        ccs.minSlopeLimit = this._minSlopeLimit;\r\n        ccs.noFirstPerson = this._noFirstPerson;\r\n        ccs.stepOffset = this._stepOffset;\r\n        ccs.sound = this._stepSound;\r\n\r\n        return ccs;\r\n    }\r\n\r\n    public setSettings(ccs: CCSettings) {\r\n        this.setFaceForward(ccs.faceForward);\r\n        this.setMode(ccs.topDown ? 1 : 0);\r\n        this.setTurningOff(ccs.turningOff);\r\n        this.setCameraTarget(ccs.cameraTarget);\r\n        this.setCameraElasticity(ccs.cameraElastic);\r\n        this.setElasticiSteps(ccs.elasticSteps);\r\n        this.makeObstructionInvisible(ccs.makeInvisble);\r\n        this.setGravity(ccs.gravity);\r\n        this.enableKeyBoard(ccs.keyboard);\r\n        this.setSlopeLimit(ccs.minSlopeLimit, ccs.maxSlopeLimit);\r\n        this.setNoFirstPerson(ccs.noFirstPerson);\r\n        this.setStepOffset(ccs.stepOffset);\r\n        this.setSound(ccs.sound);\r\n\r\n    }\r\n\r\n    private _setAnim(anim: ActionData, animName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n\r\n        //animation range need skeleton\r\n        if (!this._isAG && this._skeleton == null) return;\r\n\r\n        if (animName != null) {\r\n            if (this._isAG) {\r\n                if (!(animName instanceof AnimationGroup)) return;\r\n                anim.ag = <AnimationGroup>animName;\r\n                anim.exist = true;\r\n            } else {\r\n                if (this._skeleton.getAnimationRange(anim.name) != null) {\r\n                    anim.name = <string>animName;\r\n                    anim.exist = true;\r\n                } else {\r\n                    anim.exist = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loop != null) anim.loop = loop;\r\n        if (rate != null) anim.rate = rate;\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let act = this._actionMap[key];\r\n                if (!(act instanceof ActionData)) continue;\r\n                if (act.exist) {\r\n                    let ar: AnimationGroup = act.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this._skeleton !== null)\r\n                this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let anim = this._actionMap[key];\r\n                if (!(anim instanceof ActionData)) continue;\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.fall, rangeName, rate, loop);\r\n    }\r\n\r\n\r\n    _stepSound: Sound;\r\n    // setters for sound\r\n    public setSound(sound: Sound) {\r\n        if (sound == null) return;\r\n        this._stepSound = sound;\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        sound.loop = false;\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.sound = sound;\r\n            ccActData.sound.attachToMesh(this._avatar);\r\n        }\r\n        this._actionMap.idle.sound = null;\r\n        this._actionMap.fall.sound = null;\r\n        this._actionMap.slideBack.sound = null;\r\n    }\r\n\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._actionMap.walk.key = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._actionMap.walkBack.key = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._actionMap.turnLeft.key = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._actionMap.turnRight.key = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._actionMap.strafeLeft.key = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._actionMap.strafeRight.key = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._actionMap.idleJump.key = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._cameraElastic = b;\r\n    }\r\n\r\n    public setElasticiSteps(n: number) {\r\n        this._elasticSteps = n;\r\n    }\r\n\r\n    public makeObstructionInvisible(b: boolean) {\r\n        this._makeInvisible = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n    /**\r\n     * if av has the required anim (walk, run etc) then \r\n     * mark that anim as existing\r\n     * \r\n     * @param skel \r\n     */\r\n\r\n    private _checkAnimRanges(skel: Skeleton) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim.id) != null) {\r\n                    anim.name = anim.id;\r\n                    anim.exist = true;\r\n                    this._hasAnims = true;\r\n                }\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack)\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: ActionData, s: ActionData) {\r\n        if (f.exist) return;\r\n        if (!s.exist) return;\r\n        f.exist = true;\r\n        f.ag = s.ag;\r\n        f.name = s.name;\r\n        f.rate = s.rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatar too.\r\n     * \r\n     * cannot switch mode to 0 if no camera avaiable.\r\n     */\r\n    private _mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        //cannot switch mode to 0 if no camera avaiable.\r\n        if (this._hasCam) {\r\n            this._mode = n;\r\n            this._saveMode = n;\r\n        } else {\r\n            this._mode = 1;\r\n            this._saveMode = 1;\r\n        }\r\n    }\r\n    public getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n    public isTurningOff() {\r\n        return this._noRot;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isLHS_RHS = false;\r\n    private _signLHS_RHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromArray(<DeepImmutable<Float32Array>>meshMatrix.m, 0);\r\n        const _localY = Vector3.FromArray(<DeepImmutable<Float32Array>>meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromArray(<DeepImmutable<Float32Array>>meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isLHS_RHS = true;\r\n            this._signLHS_RHS = 1;\r\n        }\r\n        else {\r\n            this._isLHS_RHS = false;\r\n            this._signLHS_RHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar's face  points forward (true) or backward (false).\r\n     * The avatar's face  points forward if its face is looking in positive local Z axis direction\r\n     */\r\n    private _ffSign: number;\r\n    private _rhsSign: number;\r\n    private _ff: boolean;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        this._ff = b;\r\n\r\n        this._rhsSign = this._scene.useRightHandedSystem ? -1 : 1;\r\n\r\n        if (!this._hasCam) {\r\n            this._av2cam = 0;\r\n            this._ffSign = 1;\r\n            return;\r\n        }\r\n\r\n        if (this._isLHS_RHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n\r\n    }\r\n\r\n    public isFaceForward() {\r\n        return this._ff;\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if any of the mesh on the node tree is refrenced by any animation group\r\n    private _containsAG(node: Node, ags: AnimationGroup[], fromRoot: boolean) {\r\n        let r: Node;\r\n        let ns: Node[];\r\n\r\n        if (fromRoot) {\r\n            r = this._getRoot(node);\r\n            ns = r.getChildren((n) => { return (n instanceof TransformNode) }, false);\r\n        } else {\r\n            r = node;\r\n            ns = [r];\r\n        }\r\n\r\n        for (let ag of ags) {\r\n            let tas: TargetedAnimation[] = ag.targetedAnimations;\r\n            for (let ta of tas) {\r\n                if (ns.indexOf(ta.target) > -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //get the root of Node\r\n    private _getRoot(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._getRoot(tn.parent);\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevActData = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n\r\n        if (this._prevActData != null && this._prevActData.exist) {\r\n            //stop current animation\r\n            if (this._isAG) {\r\n                this._prevActData.ag.stop();\r\n            } else {\r\n                console.log(\"stopping ar \" + this._prevActData.name);\r\n                //this._scene.stopAnimation(this._skeleton, this._prevActData.name);\r\n                this._scene.stopAnimation(this._skeleton);\r\n                //this._scene.stopAllAnimations();\r\n            }\r\n            //stop current sound\r\n            if (this._prevActData.sound != null) {\r\n                this._prevActData.sound.stop();\r\n            }\r\n            clearInterval(this._sndId);\r\n\r\n            this._scene.unregisterBeforeRender(this._renderer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n        this._prevActData = null;\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    private _prevActData: ActionData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (!this._hasCam) return 1;\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let actData: ActionData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            actData = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            actData = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            actData = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && actData != null) {\r\n            if (this._prevActData !== actData) {\r\n                if (actData.exist) {\r\n\r\n                    //animation frame counts\r\n                    let c: number;\r\n                    let fps: number = 30;\r\n\r\n                    if (this._isAG) {\r\n                        if (this._prevActData != null && this._prevActData.exist) this._prevActData.ag.stop();\r\n                        actData.ag.start(actData.loop, actData.rate);\r\n                        fps = actData.ag.targetedAnimations[0].animation.framePerSecond;\r\n                        c = (actData.ag.to - actData.ag.from);\r\n                    } else {\r\n                        let a: Animatable = this._skeleton.beginAnimation(actData.name, actData.loop, actData.rate);\r\n                        fps = a.getAnimations()[0].animation.framePerSecond;\r\n                        c = this._skeleton.getAnimationRange(actData.name).to - this._skeleton.getAnimationRange(actData.name).from;\r\n                    }\r\n\r\n                    //SOUND\r\n                    //TODO do sound as animationevent.\r\n                    if (this._prevActData != null && this._prevActData.sound != null) {\r\n                        this._prevActData.sound.stop();\r\n                    }\r\n                    clearInterval(this._sndId);\r\n                    if (actData.sound != null) {\r\n                        actData.sound.play();\r\n                        //play sound twice during the animation\r\n                        this._sndId = setInterval(() => { actData.sound.play(); }, c * 1000 / (fps * Math.abs(actData.rate) * 2));\r\n                    }\r\n                }\r\n                this._prevActData = actData;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    private _soundLoopTime = 700;\r\n    private _sndId = null;\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): ActionData {\r\n\r\n        let actData: ActionData = null;\r\n        actData = this._actionMap.runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let jumpDist: number = 0;\r\n        let disp: Vector3;\r\n\r\n        if (this._hasCam && this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._actionMap.run.speed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._actionMap.walk.speed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            jumpDist = this._calcJumpDist(this._actionMap.runJump.speed, dt);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            jumpDist = this._calcJumpDist(this._actionMap.idleJump.speed, dt);\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            actData = this._actionMap.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    actData = this._actionMap.fall;\r\n                }\r\n            }\r\n        }\r\n        return actData;\r\n    }\r\n\r\n    private _calcJumpDist(speed: number, dt: number): number {\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number = speed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        return jumpDist;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): ActionData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let actdata: ActionData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        }\r\n\r\n\r\n        //in case avatar was rotated by player, rotate camera around avatar to align with avatar\r\n        actdata = this._rotateC2AV(actdata, moving, dt);\r\n\r\n        //in case camera was rotated by player around the avatar, rotate the avatar to align with camera\r\n        this._rotateAV2C();\r\n\r\n        //now that avatar is rotated properly, construct the vector to move the avatar \r\n        //donot move the avatar if avatar is in freefall\r\n\r\n        if (!this._inFreeFall) {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signLHS_RHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeLeft.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeLeftFast.speed * dt;\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signLHS_RHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeRight.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeRightFast.speed * dt;\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this._mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._actionMap.run.speed * dt;\r\n                        actdata = this._actionMap.run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._actionMap.walk.speed * dt;\r\n                        actdata = this._actionMap.walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._actionMap.walkBack.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.walkBackFast.speed * dt;\r\n                        actdata = this._actionMap.walkBackFast;\r\n                    } else {\r\n                        actdata = this._actionMap.walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // move the avatar\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _slp: number = this._verticalSlope(actDisp);\r\n                    if (_slp >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_slp > this._sl1) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            actdata = this._actionMap.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return actdata;\r\n    }\r\n\r\n    /**\r\n     * rotate avatar in camera direction, in case player had rotated  the camera around avatar\r\n     */\r\n\r\n\r\n    private _rotateAV2C() {\r\n        if (this._hasCam)\r\n            if (this._mode != 1) {\r\n                let ca = (this._hasCam) ? (this._av2cam - this._camera.alpha) : 0;\r\n                if (this._noRot) {\r\n                    switch (true) {\r\n                        case (this._act._walk && this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walk && this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walkback && this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * 3 * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walkback && this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * 3 * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walk):\r\n                            this._avatar.rotation.y = ca;\r\n                            break;\r\n                        case (this._act._walkback):\r\n                            this._avatar.rotation.y = ca + Math.PI;\r\n                            break;\r\n                        case (this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * Math.PI / 2;\r\n                            break;\r\n                        case (this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * Math.PI / 2;\r\n                            break;\r\n                    }\r\n                } else {\r\n                    if (this._hasCam)\r\n                        this._avatar.rotation.y = ca;\r\n                }\r\n            }\r\n    }\r\n\r\n    //rotate the avatar in case player is trying to rotate the avatar. rotate the camera too if camera turning is on\r\n    private _rotateC2AV(anim: ActionData, moving: boolean, dt: number): ActionData {\r\n        if (!(this._noRot && this._mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._actionMap.turnLeft.speed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            let a;\r\n            if (this._mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isLHS_RHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._actionMap.turnRight : this._actionMap.turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._actionMap.turnLeft : this._actionMap.turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._actionMap.turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._actionMap.turnRight; }\r\n                }\r\n                if (this._hasCam)\r\n                    this._camera.alpha = this._camera.alpha + this._rhsSign * turnAngle * a;\r\n            }\r\n\r\n            // this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): ActionData {\r\n        if (this._grounded) {\r\n            return this._actionMap.idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: ActionData = this._actionMap.idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this._hasCam && this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._actionMap.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        if (!this._hasCam) return;\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._cameraElastic || this._makeInvisible) this._handleObstruction(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this._mode;\r\n                this._mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this._mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _prevPickedMeshes: AbstractMesh[];\r\n    private _pickedMeshes: AbstractMesh[] = new Array();;\r\n    private _makeInvisible = false;\r\n    private _elasticSteps = 50;\r\n    private _alreadyInvisible: AbstractMesh[];\r\n\r\n    /**\r\n     * The following method handles the use case wherein some mesh\r\n     * comes between the avatar and the camera thus obstructing the view\r\n     * of the avatar.\r\n     * Two ways this can be handled\r\n     * a) make the obstructing  mesh invisible\r\n     *   instead of invisible a better option would have been to make semi transparent.\r\n     *   Unfortunately, unlike mesh, mesh instances do not \"visibility\" setting)\r\n     *   Every alternate frame make mesh visible and invisible to give the impression of semi-transparent.\r\n     * b) move the camera in front of the obstructing mesh\r\n     */\r\n    private _handleObstruction() {\r\n\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        //TODO \r\n        //handle case were pick is with a child of avatar, avatar atatchment. etc\r\n        const pis: PickingInfo[] = this._scene.multiPickWithRay(this._ray, (mesh) => {\r\n            if (mesh == this._avatar) return false;\r\n            else return true;\r\n        });\r\n\r\n\r\n        if (this._makeInvisible) {\r\n            this._prevPickedMeshes = this._pickedMeshes;\r\n            if (pis.length > 0) {\r\n                this._pickedMeshes = new Array();\r\n                for (let pi of pis) {\r\n                    if (pi.pickedMesh.isVisible || this._prevPickedMeshes.includes(pi.pickedMesh)) {\r\n                        pi.pickedMesh.isVisible = false;\r\n                        this._pickedMeshes.push(pi.pickedMesh);\r\n                    }\r\n                }\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    if (!this._pickedMeshes.includes(pm)) {\r\n                        pm.isVisible = true;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    pm.isVisible = true;\r\n                }\r\n                this._prevPickedMeshes.length = 0;\r\n            }\r\n        }\r\n\r\n        if (this._cameraElastic) {\r\n            if (pis.length > 0) {\r\n                // postion the camera in front of the mesh that is obstructing camera\r\n\r\n                //if only one obstruction and it is invisible then if it is not collidable or our camera is not collidable then do nothing\r\n                if ((pis.length == 1 && !this._isSeeAble(pis[0].pickedMesh)) && (!pis[0].pickedMesh.checkCollisions || !this._camera.checkCollisions)) return;\r\n\r\n                //if our camera is collidable then we donot want it to get stuck behind another collidable obsrtucting mesh\r\n                let pp: Vector3 = null;\r\n\r\n                //we will asume the order of picked meshes is from closest to avatar to furthest\r\n                //we should get the first one which is visible or invisible and collidable\r\n                for (let i = 0; i < pis.length; i++) {\r\n                    let pm = pis[i].pickedMesh;\r\n                    if (this._isSeeAble(pm)) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    } else if (pm.checkCollisions) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pp == null) return;\r\n\r\n                const c2p: Vector3 = this._camera.position.subtract(pp);\r\n                //note that when camera is collidable, changing the orbital camera radius may not work.\r\n                //changing the radius moves the camera forward (with collision?) and collision can interfere with movement\r\n                //\r\n                //in every cylce we are dividing the distance to tarvel by same number of steps.\r\n                //as we get closer to destination the speed will thus slow down.\r\n                //when just 1 unit distance left, lets snap to the final position.\r\n                //when calculating final position make sure the camera does not get stuck at the pickposition especially\r\n                //if collision is on\r\n\r\n                const l: number = c2p.length();\r\n                if (this._camera.checkCollisions) {\r\n                    let step: Vector3;\r\n                    if (l <= 1) {\r\n                        step = c2p.addInPlace(c2p.normalizeToNew().scaleInPlace(this._cameraSkin));\r\n                    } else {\r\n                        step = c2p.normalize().scaleInPlace(l / this._elasticSteps);\r\n                    }\r\n                    this._camera.position = this._camera.position.subtract(step);\r\n                } else {\r\n                    let step: number;\r\n                    if (l <= 1) step = l + this._cameraSkin; else step = l / this._elasticSteps;\r\n                    this._camera.radius = this._camera.radius - (step);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //how many ways can a mesh be invisible?\r\n    private _isSeeAble(mesh: AbstractMesh): boolean {\r\n        if (!mesh.isVisible) return false;\r\n        if (mesh.visibility == 0) return false;\r\n        if (mesh.material != null && mesh.material.alphaMode != 0 && mesh.material.alpha == 0) return false;\r\n        return true;\r\n        //what about vertex color? groan!\r\n    }\r\n\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._actionMap.idleJump.key:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _ekb: boolean;\r\n    public enableKeyBoard(b: boolean) {\r\n        this._ekb = b;\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    public isAg() {\r\n        return this._isAG;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _findSkel(n: Node): Skeleton {\r\n        let root = this._root(n);\r\n\r\n        if (root instanceof Mesh && root.skeleton) return root.skeleton;\r\n\r\n        //find all child meshes which have skeletons\r\n        let ms = root.getChildMeshes(\r\n            false,\r\n            (cm) => {\r\n                if (cm instanceof Mesh) {\r\n                    if (cm.skeleton) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n        //return the skeleton of the first child mesh\r\n        if (ms.length > 0) return ms[0].skeleton; else return null;\r\n\r\n    }\r\n\r\n    private _root(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._root(tn.parent);\r\n    }\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false): boolean {\r\n\r\n        let rootNode = this._root(avatar);\r\n        if (rootNode instanceof Mesh) {\r\n            this._avatar = rootNode;\r\n        } else {\r\n            console.error(\"Cannot move this mesh. The root node of the mesh provided is not a mesh\");\r\n            return false;\r\n        }\r\n\r\n        this._skeleton = this._findSkel(avatar);\r\n        this._isAG = this._containsAG(avatar, this._scene.animationGroups, true);\r\n\r\n        this._actionMap.reset();\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAvatar() {\r\n        return this._avatar;\r\n    }\r\n\r\n    // force a skeleton to be the avatar skeleton\r\n    // should not be calling this normally\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n\r\n\r\n        if (this._skeleton != null && this._skelDrivenByAG(skeleton)) this._isAG = true; else this._isAG = false;\r\n\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n    }\r\n\r\n\r\n    // this check if any of this skeleton animations is referenced by any targetedAnimation in any of the animationgroup in the scene.\r\n    private _skelDrivenByAG(skeleton: Skeleton) {\r\n        return skeleton.animations.some(sa => this._scene.animationGroups.some(ag => ag.children.some(ta => ta.animation == sa)));\r\n    }\r\n\r\n    public getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    // does this character have any animations ?\r\n    // remember we can use meshes without anims as characters too\r\n    private _hasAnims: boolean = false;\r\n    private _hasCam: boolean = true;\r\n\r\n    /**\r\n     * The avatar/character can be made up of multiple meshes arranged in a hierarchy.\r\n     * As such we will pick the root of the hierarchy as the avatar.\r\n     * The root should be a mesh as otherwise we cannot move it with moveWithCollision() method.\r\n     * \r\n     * Mutiple meshes in the hierarchy may have skeletons (if two or more meshes have skeleton then\r\n     * the skeleton will mostly likely be the same). \r\n     * So we will pick as avatar skeleton, the  skeleton of the first mesh in the hierachy which has\r\n     * a skeleton \r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param actionMap/animationGroupMap \r\n     *        maps actions to animations and other data like speed,sound etc \r\n     *        or \r\n     *        for backward compatibility could be AnimationGroup Map\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, actionMap?: {}, faceForward = false) {\r\n\r\n        this._camera = camera;\r\n\r\n        //if camera is null assume this would be used to control an NPC\r\n        //we cannot use mode 0 as that is dependent on camera being present. so force mode 1\r\n        if (this._camera == null) {\r\n            this._hasCam = false;\r\n            this.setMode(1);\r\n        }\r\n        this._scene = scene;\r\n\r\n        let success = this.setAvatar(avatar, faceForward);\r\n        if (!success) {\r\n            console.error(\"unable to set avatar\");\r\n        }\r\n\r\n\r\n        let dataType: string = null;\r\n        if (actionMap != null) {\r\n            dataType = this.setActionMap(<ActionMap>actionMap);\r\n        }\r\n\r\n        //try to use the existing avatar animations\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n        //animation groups\r\n        if (this._isAG) {\r\n            //TODO\r\n        }\r\n\r\n        if (this._hasCam) this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\n\r\n\r\nclass _Action {\r\n\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n\r\nexport class ActionData {\r\n    public id: string;\r\n    public speed: number;\r\n    //_ds default speed.  speed is set to this on reset\r\n    public ds: number;\r\n    public sound: Sound;\r\n    public key: string;\r\n    //_dk defailt key\r\n    public dk: string;\r\n\r\n    //animation data\r\n    //if _ag is null then assuming animation range and use _name to play animationrange\r\n    //instead of name maybe call it arName?\r\n    public name: string = \"\";\r\n    public ag: AnimationGroup;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n\r\n    public exist: boolean = false;\r\n\r\n    public constructor(id?: string, speed = 1, key?: string) {\r\n        this.id = id;\r\n        this.speed = speed;\r\n        this.ds = speed;\r\n        this.key = key;\r\n        this.dk = key;\r\n    }\r\n\r\n    public reset() {\r\n        this.name = \"\";\r\n        this.speed = this.ds;\r\n        this.key = this.dk;\r\n        this.loop = true;\r\n        this.rate = 1;\r\n        this.sound = null;\r\n        this.exist = false;\r\n    }\r\n\r\n}\r\n\r\n//not really a \"Map\"\r\nexport class ActionMap {\r\n    public walk = new ActionData(\"walk\", 3, \"w\");\r\n    public walkBack = new ActionData(\"walkBack\", 1.5, \"s\");\r\n    public walkBackFast = new ActionData(\"walkBackFast\", 3, \"na\");\r\n    public idle = new ActionData(\"idle\", 0, \"na\");\r\n    public idleJump = new ActionData(\"idleJump\", 6, \" \");\r\n    public run = new ActionData(\"run\", 6, \"na\");\r\n    public runJump = new ActionData(\"runJump\", 6, \"na\");\r\n    public fall = new ActionData(\"fall\", 0, \"na\");\r\n    public turnLeft = new ActionData(\"turnLeft\", Math.PI / 8, \"a\");\r\n    public turnLeftFast = new ActionData(\"turnLeftFast\", Math.PI / 4, \"na\");\r\n    public turnRight = new ActionData(\"turnRight\", Math.PI / 8, \"d\");\r\n    public turnRightFast = new ActionData(\"turnRightFast\", Math.PI / 4, \"na\");\r\n    public strafeLeft = new ActionData(\"strafeLeft\", 1.5, \"q\");\r\n    public strafeLeftFast = new ActionData(\"strafeLeftFast\", 3, \"na\");\r\n    public strafeRight = new ActionData(\"strafeRight\", 1.5, \"e\");\r\n    public strafeRightFast = new ActionData(\"strafeRightFast\", 3, \"na\");\r\n    public slideBack = new ActionData(\"slideBack\", 0, \"na\");\r\n\r\n    public reset() {\r\n        let keys: string[] = Object.keys(this);\r\n        for (let key of keys) {\r\n            let act = this[key];\r\n            if (!(act instanceof ActionData)) continue;\r\n            act.reset()\r\n        }\r\n    }\r\n};\r\n\r\nexport class CCSettings {\r\n    public faceForward: boolean;\r\n    public gravity: number;\r\n    public minSlopeLimit: number;\r\n    public maxSlopeLimit: number;\r\n    public stepOffset: number;\r\n    public cameraElastic: boolean = true;\r\n    public elasticSteps: number;\r\n    public makeInvisble: boolean = true;\r\n    public cameraTarget: Vector3 = Vector3.Zero();\r\n    public noFirstPerson: boolean = false;\r\n    public topDown: boolean = true;\r\n    //turningOff takes effect only when topDown is false\r\n    public turningOff: boolean = true;\r\n    public keyboard: boolean = true;\r\n    public sound: Sound;\r\n}\r\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__247__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","avatar","camera","scene","actionMap","faceForward","_avatar","_skeleton","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","Math","PI","this","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Vector3","_actionMap","ActionMap","_cameraElastic","_cameraTarget","_noFirstPerson","_mode","_saveMode","_isLHS_RHS","_signLHS_RHS","_started","_stopAnim","_prevActData","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_soundLoopTime","_sndId","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","Ray","_rayDir","_cameraSkin","_pickedMeshes","Array","_makeInvisible","_elasticSteps","_move","_isAG","_hasAnims","_hasCam","_camera","setMode","_scene","setAvatar","console","error","setActionMap","_checkAnimRanges","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","getScene","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","walk","speed","setRunSpeed","run","setBackSpeed","walkBack","setBackFastSpeed","walkBackFast","setJumpSpeed","idleJump","runJump","setLeftSpeed","strafeLeft","setLeftFastSpeed","strafeLeftFast","setRightSpeed","strafeRight","setRightFastSpeed","setTurnSpeed","turnLeft","turnRight","setTurnFastSpeed","turnLeftFast","turnRightFast","setGravity","setAnimationGroups","agMap","exist","ag","stop","setAnimationRanges","arMap","inActMap","inActData","keys","ccActionName","ccActData","ActionData","id","AnimationGroup","name","loop","rate","sound","_checkFastAnims","getActionMap","map","actDataI","actDataO","getSettings","ccs","CCSettings","isFaceForward","topDown","getMode","turningOff","isTurningOff","cameraTarget","clone","cameraElastic","elasticSteps","makeInvisble","gravity","keyboard","_ekb","noFirstPerson","_stepSound","setSettings","setFaceForward","setTurningOff","setCameraTarget","setCameraElasticity","setElasticiSteps","makeObstructionInvisible","enableKeyBoard","setNoFirstPerson","setSound","_setAnim","anim","animName","getAnimationRange","enableBlending","act","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","rangeName","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","slideBack","setIdleAnim","idle","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","strafeRightFast","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","fall","ccActionNames","attachToMesh","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","b","v","copyFrom","cameraCollisionChanged","skel","f","s","_setRHS","mesh","meshMatrix","getWorldMatrix","_localX","m","_localY","_localZ","actualZ","_ff","_rhsSign","useRightHandedSystem","_av2cam","_ffSign","checkAGs","_containsAG","node","ags","fromRoot","ns","_getRoot","getChildren","TransformNode","indexOf","target","tn","parent","start","reset","_updateTargetValue","registerBeforeRender","unregisterBeforeRender","pauseAnim","log","stopAnimation","clearInterval","resumeAnim","_isAvFacingCamera","forward","position","subtract","actData","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","c","fps","framePerSecond","to","from","beginAnimation","getAnimations","play","setInterval","abs","y","disp","forwardDist","jumpDist","rotation","alpha","_moveVector","normalize","scaleToRef","_calcJumpDist","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","p","x","z","atan","sqrt","u","moving","actdata","_rotateC2AV","_rotateAV2C","sign","horizDist","_speedMod","calcMovePOV","_walk","_slp","_endFreeFall","ca","_turnRight","_turnLeft","_walkback","_stepLeft","_stepRight","turnAngle","_groundIt","_unGroundIt","addToRef","radius","lowerRadiusLimit","_handleObstruction","visibility","subtractToRef","origin","direction","pis","multiPickWithRay","_prevPickedMeshes","pi","pickedMesh","isVisible","includes","push","pm","_isSeeAble","pp","pickedPoint","c2p","l","step","addInPlace","normalizeToNew","scaleInPlace","material","alphaMode","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","jump","isAg","_findSkel","_root","Mesh","skeleton","ms","getChildMeshes","cm","rootNode","animationGroups","getAvatar","setAvatarSkeleton","_skelDrivenByAG","animations","some","sa","children","getSkeleton","ds","dk"],"sourceRoot":""}