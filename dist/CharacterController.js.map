{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","agMap","faceForward","_walkSpeed","_walkFastSpeed","this","_runSpeed","_backSpeed","_backFastSpeed","_jumpSpeed","_leftSpeed","_leftFastSpeed","_rightSpeed","_rightFastSpeed","_turnSpeed","Math","PI","_turnFastSpeed","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_walk","_AnimData","_walkBack","_walkBackFast","_idle","_idleJump","_run","_runJump","_fall","_turnLeft","_turnLeftFast","_turnRight","_turnRightFast","_strafeLeft","_strafeLeftFast","_strafeRight","_strafeRightFast","_slideBack","_anims","_walkKey","_walkBackKey","_turnLeftKey","_turnRightKey","_strafeLeftKey","_strafeRightKey","_jumpKey","_elasticCamera","_cameraTarget","_noFirstPerson","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_skip","_move","_isAG","_hasAnims","_avatar","_setRHS","setFaceForward","_scene","setAnimationGroups","_skeleton","skeleton","checkAnims","_camera","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","setAvatar","setAvatarSkeleton","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","setRunSpeed","setBackSpeed","setBackFastSpeed","setJumpSpeed","setLeftSpeed","setLeftFastSpeed","setRightSpeed","setRightFastSpeed","setTurnSpeed","setTurnFastSpeed","setGravity","agData","_exist","_ag","stop","anim","_id","_name","_loop","_checkFastAnims","setAnimationRanges","arMap","arData","getAnimationMap","map","data","_rate","_setAnim","rangeName","rate","loop","speedRatio","getAnimationRange","enableBlending","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","setIdleAnim","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","setCameraElasticity","b","setCameraTarget","v","copyFrom","cameraCollisionChanged","setNoFirstPerson","skel","f","setMode","setTurningOff","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","console","log","_av2cam","_ffSign","checkAGs","start","reset","_updateTargetValue","enableKeyBoard","registerBeforeRender","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","beginAnimation","y","jumpDist","disp","forwardDist","rotation","alpha","_moveVector","clone","normalize","scaleToRef","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_stepLeft","_stepRight","turnAngle","_walkback","_slp","_endFreeFall","_groundIt","_unGroundIt","addToRef","target","radius","lowerRadiusLimit","_snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","hit","newPos","pickedPoint","scale","nr","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","walk","walkBack","walkBackFast","run","turnLeft","turnLeftFast","turnRight","turnRightFast","strafeLeft","strafeLeftFast","strafeRight","strafeRightFast","jump","idle","id"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    Matrix\r\n} from \"babylonjs\"\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh;\r\n    private _skeleton: Skeleton;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n\r\n    //avatar speed in meters/second\r\n    private _walkSpeed: number = 3;\r\n    private _walkFastSpeed: number = this._walkSpeed * 2;\r\n    private _runSpeed: number = this._walkSpeed * 2;\r\n    private _backSpeed: number = this._walkSpeed / 2;\r\n    private _backFastSpeed: number = this._backSpeed * 2;\r\n    private _jumpSpeed: number = this._walkSpeed * 2;\r\n    private _leftSpeed: number = this._walkSpeed / 2;\r\n    private _leftFastSpeed: number = this._leftSpeed * 2;\r\n    private _rightSpeed: number = this._walkSpeed / 2;\r\n    private _rightFastSpeed: number = this._rightSpeed * 2;\r\n    //trun speed in radian per second (equivalent to 180 degree/second by default)\r\n    private _turnSpeed: number = Math.PI / 8;\r\n    private _turnFastSpeed: number = this._turnSpeed * 2;\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n    //animations\r\n    private _walk: _AnimData = new _AnimData(\"walk\");\r\n    private _walkBack: _AnimData = new _AnimData(\"walkBack\");\r\n    private _walkBackFast: _AnimData = new _AnimData(\"walkBackFast\");\r\n    private _idle: _AnimData = new _AnimData(\"idle\");\r\n    private _idleJump: _AnimData = new _AnimData(\"idleJump\");\r\n    private _run: _AnimData = new _AnimData(\"run\");\r\n    private _runJump: _AnimData = new _AnimData(\"runJump\");\r\n    private _fall: _AnimData = new _AnimData(\"fall\");\r\n    private _turnLeft: _AnimData = new _AnimData(\"turnLeft\");\r\n    private _turnLeftFast: _AnimData = new _AnimData(\"turnLeftFast\");\r\n    private _turnRight: _AnimData = new _AnimData(\"turnRight\");\r\n    private _turnRightFast: _AnimData = new _AnimData(\"turnRightFast\");\r\n    private _strafeLeft: _AnimData = new _AnimData(\"strafeLeft\");\r\n    private _strafeLeftFast: _AnimData = new _AnimData(\"strafeLeftFast\");\r\n    private _strafeRight: _AnimData = new _AnimData(\"strafeRight\");\r\n    private _strafeRightFast: _AnimData = new _AnimData(\"strafeRightFast\");\r\n    private _slideBack: _AnimData = new _AnimData(\"slideBack\");\r\n\r\n    private _anims: _AnimData[] = [this._walk, this._walkBack, this._walkBackFast, this._idle, this._idleJump, this._run, this._runJump, this._fall, this._turnLeft, this._turnLeftFast, this._turnRight, this._turnRightFast, this._strafeLeft, this._strafeLeftFast, this._strafeRight, this._strafeRightFast, this._slideBack];\r\n\r\n    //move keys\r\n    private _walkKey: string = \"w\";\r\n    private _walkBackKey: string = \"s\";\r\n    private _turnLeftKey: string = \"a\";\r\n    private _turnRightKey: string = \"d\";\r\n    private _strafeLeftKey: string = \"q\";\r\n    private _strafeRightKey: string = \"e\";\r\n    private _jumpKey: string = \" \";\r\n\r\n    private _elasticCamera: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false) {\r\n        this._avatar = avatar;\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n    }\r\n\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n        this.checkAnims(skeleton);\r\n    }\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._walkSpeed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._runSpeed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._backSpeed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._backFastSpeed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._jumpSpeed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._leftSpeed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._leftFastSpeed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._rightSpeed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._rightFastSpeed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._turnSpeed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._turnFastSpeed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevAnim != null && this._prevAnim._exist) this._prevAnim._ag.stop();\r\n        this._isAG = true;\r\n        let agData: AnimationGroup | {};\r\n        for (let anim of this._anims) {\r\n            anim._exist = false;\r\n            agData = agMap[anim._id];\r\n            if (agData != null) {\r\n                if (agData instanceof AnimationGroup) {\r\n                    anim._ag = agData;\r\n                    anim._name = anim._ag.name\r\n                    anim._exist = true;\r\n                } else {\r\n                    if (agData[\"ag\"]) {\r\n                        anim._ag = agData[\"ag\"];\r\n                        if (agData[\"loop\"]) anim._loop = agData[\"loop\"];\r\n                        if (agData[\"rate\"]) anim._loop = agData[\"rate\"];\r\n                        anim._exist = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevAnim = null;\r\n    }\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        let arData: string | {};\r\n        for (let anim of this._anims) {\r\n            anim._exist = false;\r\n            arData = arMap[anim._id];\r\n            if (arData != null) {\r\n                if (arData instanceof Object) {\r\n                    if (arData[\"name\"]) {\r\n                        anim._name = arData[\"name\"];\r\n                        if (arData[\"loop\"]) anim._loop = arData[\"loop\"];\r\n                        if (arData[\"rate\"]) anim._loop = arData[\"rate\"];\r\n                        anim._exist = true;\r\n                    }\r\n                } else {\r\n                    anim._name = arData;\r\n                    anim._exist = true;\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevAnim = null;\r\n\r\n\r\n    }\r\n\r\n    public getAnimationMap(): {} {\r\n        let map = {};\r\n\r\n        for (let anim of this._anims) {\r\n            if (anim._exist) {\r\n                let data = {};\r\n\r\n                if (this._isAG) data[\"ag\"] = anim._ag;\r\n                else data[\"name\"] = anim._name;\r\n                data[\"loop\"] = anim._loop;\r\n                data[\"rate\"] = anim._rate;\r\n\r\n                map[anim._id] = data;\r\n            }\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    private _setAnim(anim: _AnimData, rangeName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n        if (!this._isAG && this._skeleton == null) return;\r\n        if (loop != null) anim._loop = loop;\r\n        if (!this._isAG) {\r\n            if (rangeName != null) anim._name = <string>rangeName;\r\n            if (rate != null) anim._rate = rate;\r\n            if (this._skeleton.getAnimationRange(anim._name) != null) {\r\n                anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        } else {\r\n            if (rangeName != null) {\r\n                anim._ag = <AnimationGroup>rangeName;\r\n                anim._exist = true;\r\n            }\r\n            if (rate != null && anim._exist) {\r\n                anim._rate = rate;\r\n                anim._ag.speedRatio = rate;\r\n            }\r\n        }\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._walkBackFast, this._walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._turnRightFast, this._turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._turnLeftFast, this._turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._strafeRightFast, this._strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._strafeLeftFast, this._strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._walkKey = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._walkBackKey = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._turnLeftKey = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._turnRightKey = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._strafeLeftKey = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._strafeRightKey = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._jumpKey = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._elasticCamera = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n\r\n    private checkAnims(skel: Skeleton) {\r\n        for (let anim of this._anims) {\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim._name) != null) anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._walkBackFast, this._walkBack)\r\n        this._copySlowAnims(this._turnRightFast, this._turnRight);\r\n        this._copySlowAnims(this._turnLeftFast, this._turnLeft);\r\n        this._copySlowAnims(this._strafeRightFast, this._strafeRight);\r\n        this._copySlowAnims(this._strafeLeftFast, this._strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: _AnimData, s: _AnimData) {\r\n        if (f._exist) return;\r\n        if (!s._exist) return;\r\n        f._exist = true;\r\n        f._ag = s._ag;\r\n        f._name = s._name;\r\n        f._rate = s._rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this.mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            console.log(\"rhs issue\");\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        for (let anim of this._anims) {\r\n            if (agMap[anim._name] != null) {\r\n                anim._ag = agMap[anim._name];\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: _AnimData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: _AnimData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim._exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim._exist) this._prevAnim._ag.stop();\r\n                        //TODO use start instead of play ?\r\n                        //anim._ag.play(anim._loop);\r\n                        //anim._ag.speedRatio = anim._rate;\r\n                        anim._ag.start(anim._loop, anim._rate);\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim._name, anim._loop, anim._rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): _AnimData {\r\n\r\n        let anim: _AnimData = null;\r\n        anim = this._runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        const js: number = this._jumpSpeed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        const jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._runSpeed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._walkSpeed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): _AnimData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: _AnimData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._leftSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._leftFastSpeed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeftFast : this._strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    }\r\n\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._rightSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._rightFastSpeed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeftFast : this._strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this.mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._walkFastSpeed * dt;\r\n                        anim = this._run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._walkSpeed * dt;\r\n                        anim = this._walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._backSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._backFastSpeed * dt;\r\n                        anim = this._walkBackFast;\r\n                    } else {\r\n                        anim = this._walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this.mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._turnSpeed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this.mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._turnRight : this._turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._turnLeft : this._turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this.mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _slp: number = this._verticalSlope(actDisp);\r\n                    if (_slp >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_slp > this._sl1) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): _AnimData {\r\n        if (this._grounded) {\r\n            return this._idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: _AnimData = this._idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._elasticCamera) this._snapCamera(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this.mode;\r\n                this.mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this.mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _skip: number = 0;\r\n    private _snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this._avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this._camera.checkCollisions) {\r\n                const newPos: Vector3 = this._camera.target.subtract(pi.pickedPoint).normalize().scale(this._cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this._camera.position);\r\n            } else {\r\n                const nr: number = pi.pickedPoint.subtract(this._camera.target).length();\r\n                this._camera.radius = nr - this._cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._jumpKey:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n\r\n    // public disableKeyBoard() {\r\n    //     let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n    //     canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n    //     canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n    // }\r\n\r\n    public enableKeyBoard(b: boolean) {\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    private _hasAnims: boolean = false;\r\n    /**\r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param agMap map of animationRange name to animationRange\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, agMap?: {}, faceForward = false) {\r\n\r\n        this._avatar = avatar;\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        this._scene = scene;\r\n\r\n        if (agMap != null) {\r\n            this._isAG = true;\r\n            this.setAnimationGroups(agMap);\r\n        }\r\n\r\n        if (this._isAG || this._skeleton !== null) {\r\n            this._hasAnims = true;\r\n        }\r\n\r\n        if (!this._isAG) this._skeleton = avatar.skeleton;\r\n\r\n        if (!this._isAG && this._skeleton != null) this.checkAnims(this._skeleton);\r\n        this._camera = camera;\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\nclass _AnimData {\r\n    public _id: string;\r\n\r\n    //_name will be used to play animationrange\r\n    public _name: string;\r\n    public _ag: AnimationGroup;\r\n\r\n    public _loop: boolean = true;\r\n    public _rate: number = 1;\r\n\r\n    public _exist: boolean = false;\r\n\r\n    public constructor(id: string) {\r\n        this._id = id;\r\n        this._name = id;\r\n    }\r\n}\r\n\r\nclass _Action {\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n"],"sourceRoot":""}