{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","agMap","walkSpeed","runSpeed","this","backSpeed","jumpSpeed","leftSpeed","rightSpeed","gravity","minSlopeLimit","maxSlopeLimit","sl","Math","PI","sl2","_stepOffset","_vMoveTot","_vMovStartPos","walk","AnimData","walkBack","idle","idleJump","run","runJump","fall","turnLeft","turnRight","strafeLeft","strafeRight","slideBack","anims","walkKey","walkBackKey","turnLeftKey","turnRightKey","strafeLeftKey","strafeRightKey","jumpKey","walkCode","walkBackCode","turnLeftCode","turnRightCode","strafeLeftCode","strafeRightCode","jumpCode","elasticCamera","cameraTarget","noFirstPerson","started","_stopAnim","prevAnim","avStartPos","grounded","freeFallDist","fallFrameCountMin","fallFrameCount","inFreeFall","wasWalking","wasRunning","jumpStartPosY","jumpTime","movFallTime","idleFallTime","groundFrameCount","groundFrameMax","savedCameraCollision","ray","Zero","One","rayDir","cameraSkin","skip","move","_isAG","_hasAnims","setAnimationGroups","skeleton","checkAnims","checkCollisions","Key","renderer","moveAVandCamera","handleKeyUp","e","onKeyUp","handleKeyDown","onKeyDown","addEventListener","setAvatar","setAvatarSkeleton","setSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","setRunSpeed","setBackSpeed","setJumpSpeed","setLeftSpeed","setRightSpeed","setGravity","anim","ag","exist","setAnimationRanges","arMap","arData","loop","setAnim","rangeName","rate","speedRatio","getAnimationRange","enableBlending","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","setRunAnim","setWalkBackAnim","setSlideBackAnim","setIdleAnim","setTurnRightAnim","setTurnLeftAnim","setStrafeRightAnim","setSrafeLeftAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","setWalkKey","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","setWalkCode","code","setWalkBackCode","setTurnLeftCode","setTurnRightCode","setStrafeLeftCode","setStrafeRightCode","setJumpCode","setCameraElasticity","b","setCameraTarget","v","copyFrom","cameraCollisionChanged","setNoFirstPerson","skel","checkAGs","start","reset","updateTargetValue","registerBeforeRender","stop","unregisterBeforeRender","removeEventListener","pauseAnim","resumeAnim","position","dt","getEngine","getDeltaTime","jump","doJump","anyMovement","doMove","doIdle","play","beginAnimation","y","jumpDist","disp","forwardDist","rotation","alpha","moveVector","clone","normalize","scaleToRef","moveWithCollisions","length","endJump","actDisp","subtract","areVectorsEqual","verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","forward","shift","calcMovePOV","backward","stepLeft","stepRight","_sl","endFreeFall","groundIt","unGroundIt","addToRef","target","radius","lowerRadiusLimit","snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","mesh","hit","newPos","pickedPoint","scale","nr","keyCode","chr","String","fromCharCode"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup\r\n} from \"babylonjs\"\r\n\r\nexport class CharacterController {\r\n\r\n    private avatar: Mesh;\r\n    private skeleton: Skeleton;\r\n    private camera: ArcRotateCamera;\r\n    private scene: Scene;\r\n\r\n    //avatar speed in meters/second\r\n    private walkSpeed: number = 3;\r\n    private runSpeed: number = this.walkSpeed * 2;\r\n    private backSpeed: number = this.walkSpeed / 2;\r\n    private jumpSpeed: number = this.walkSpeed * 2;\r\n    private leftSpeed: number = this.walkSpeed / 2;\r\n    private rightSpeed: number = this.walkSpeed / 2;\r\n    private gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private minSlopeLimit: number = 30;\r\n    private maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    sl: number = Math.PI * this.minSlopeLimit / 180;\r\n    sl2: number = Math.PI * this.maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = new Vector3(0, 0, 0);\r\n\r\n    //animations\r\n    private walk: AnimData = new AnimData(\"walk\");\r\n    private walkBack: AnimData = new AnimData(\"walkBack\");\r\n    private idle: AnimData = new AnimData(\"idle\");\r\n    private idleJump: AnimData = new AnimData(\"idleJump\");\r\n    private run: AnimData = new AnimData(\"run\");\r\n    private runJump: AnimData = new AnimData(\"runJump\");\r\n    private fall: AnimData = new AnimData(\"fall\");\r\n    private turnLeft: AnimData = new AnimData(\"turnLeft\");\r\n    private turnRight: AnimData = new AnimData(\"turnRight\");\r\n    private strafeLeft: AnimData = new AnimData(\"strafeLeft\");\r\n    private strafeRight: AnimData = new AnimData(\"strafeRight\");\r\n    private slideBack: AnimData = new AnimData(\"slideBack\");\r\n\r\n    private anims: AnimData[] = [this.walk, this.walkBack, this.idle, this.idleJump, this.run, this.runJump, this.fall, this.turnLeft, this.turnRight, this.strafeLeft, this.strafeRight, this.slideBack];\r\n\r\n    //move keys\r\n    private walkKey: string = \"W\";\r\n    private walkBackKey: string = \"S\";\r\n    private turnLeftKey: string = \"A\";\r\n    private turnRightKey: string = \"D\";\r\n    private strafeLeftKey: string = \"Q\";\r\n    private strafeRightKey: string = \"E\";\r\n    private jumpKey: string = \"32\";\r\n    private walkCode: number = 38;\r\n    private walkBackCode: number = 40;\r\n    private turnLeftCode: number = 37;\r\n    private turnRightCode: number = 39;\r\n    private strafeLeftCode: number = 0;\r\n    private strafeRightCode: number = 0;\r\n    private jumpCode: number = 32;\r\n\r\n    private elasticCamera: boolean = true;\r\n    private cameraTarget: Vector3 = new Vector3(0, 0, 0);\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private noFirstPerson: boolean = false;\r\n\r\n    public setAvatar(avatar: Mesh) {\r\n        this.avatar = avatar;\r\n    }\r\n\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this.skeleton = skeleton;\r\n        this.checkAnims(skeleton);\r\n    }\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this.minSlopeLimit = minSlopeLimit;\r\n        this.maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this.sl = Math.PI * minSlopeLimit / 180;\r\n        this.sl2 = Math.PI * this.maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this.walkSpeed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this.runSpeed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this.backSpeed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this.jumpSpeed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this.leftSpeed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this.rightSpeed = n;\r\n    }\r\n    public setGravity(n: number) {\r\n        this.gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        this._isAG = true;\r\n        for (let anim of this.anims) {\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        let arData: string | {};\r\n        for (let anim of this.anims) {\r\n            arData = arMap[anim.name];\r\n            if (arData != null) {\r\n                if (arData instanceof Object) {\r\n                    if (arData[\"name\"]) anim.name = arData[\"name\"];\r\n                    if (arData[\"loop\"]) anim.loop = arData[\"loop\"];\r\n                    if (arData[\"rate\"]) anim.loop = arData[\"rate\"];\r\n                } else {\r\n                    anim.name = arData;\r\n                }\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAnim(anim: AnimData, rangeName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n        if (!this._isAG && this.skeleton == null) return;\r\n        if (loop != null) anim.loop = loop;\r\n        if (!this._isAG) {\r\n            if (rangeName != null) anim.name = <string>rangeName;\r\n            if (rate != null) anim.rate = rate;\r\n            if (this.skeleton.getAnimationRange(anim.name) != null) {\r\n                anim.exist = true;\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        } else {\r\n            if (rangeName != null) {\r\n                anim.ag = <AnimationGroup>rangeName;\r\n                anim.exist = true;\r\n            }\r\n            if (rate != null && anim.exist) {\r\n                anim.rate = rate;\r\n                anim.ag.speedRatio = rate;\r\n            }\r\n        }\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            for (let anim of this.anims) {\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            for (let anim of this.anims) {\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.walkBack, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.turnRight, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.turnLeft, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.strafeRight, rangeName, rate, loop);\r\n    }\r\n    public setSrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.strafeLeft, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this.setAnim(this.fall, rangeName, rate, loop);\r\n    }\r\n\r\n    public setWalkKey(key: string) {\r\n        this.walkKey = key\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this.walkBackKey = key\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this.turnLeftKey = key\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this.turnRightKey = key\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this.strafeLeftKey = key\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this.strafeRightKey = key\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this.jumpKey = key\r\n    }\r\n\r\n    public setWalkCode(code: number) {\r\n        this.walkCode = code\r\n    }\r\n    public setWalkBackCode(code: number) {\r\n        this.walkBackCode = code\r\n    }\r\n    public setTurnLeftCode(code: number) {\r\n        this.turnLeftCode = code\r\n    }\r\n    public setTurnRightCode(code: number) {\r\n        this.turnRightCode = code\r\n    }\r\n    public setStrafeLeftCode(code: number) {\r\n        this.strafeLeftCode = code\r\n    }\r\n    public setStrafeRightCode(code: number) {\r\n        this.strafeRightCode = code\r\n    }\r\n    public setJumpCode(code: number) {\r\n        this.jumpCode = code\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this.elasticCamera = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this.cameraTarget.copyFrom(v);\r\n    }\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this.savedCameraCollision = this.camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this.noFirstPerson = b;\r\n    }\r\n\r\n    private checkAnims(skel: Skeleton) {\r\n        for (let anim of this.anims) {\r\n            if (skel.getAnimationRange(anim.name) != null) anim.exist = true;\r\n        }\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        for (let anim of this.anims) {\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private started: boolean = false;\r\n    public start() {\r\n        if (this.started) return;\r\n        this.started = true;\r\n        this.key.reset();\r\n        this.movFallTime = 0;\r\n        //first time we enter render loop, delta time shows zero !!\r\n        this.idleFallTime = 0.001;\r\n        this.grounded = false;\r\n        this.updateTargetValue();\r\n\r\n        window.addEventListener(\"keyup\", this.handleKeyUp, false);\r\n        window.addEventListener(\"keydown\", this.handleKeyDown, false);\r\n\r\n        this.scene.registerBeforeRender(this.renderer);\r\n        this.scene\r\n    }\r\n\r\n    public stop() {\r\n        if (!this.started) return;\r\n        this.started = false;\r\n        this.scene.unregisterBeforeRender(this.renderer);\r\n        window.removeEventListener(\"keyup\", this.handleKeyUp, false);\r\n        window.removeEventListener(\"keydown\", this.handleKeyDown, false);\r\n\r\n        this.prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private prevAnim: AnimData = null;\r\n\r\n    private avStartPos: Vector3 = new Vector3(0, 0, 0);\r\n    private grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private fallFrameCountMin: number = 50;\r\n    private fallFrameCount: number = 0;\r\n\r\n    private inFreeFall: boolean = false;\r\n    private wasWalking: boolean = false;\r\n    private wasRunning: boolean = false;\r\n    private moveVector: Vector3;\r\n\r\n    private moveAVandCamera() {\r\n        this.avStartPos.copyFrom(this.avatar.position);\r\n        let anim: AnimData = null;\r\n        let dt: number = this.scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this.key.jump && !this.inFreeFall) {\r\n            this.grounded = false;\r\n            this.idleFallTime = 0;\r\n\r\n            anim = this.doJump(dt);\r\n        } else if (this.anyMovement() || this.inFreeFall) {\r\n            this.grounded = false;\r\n            this.idleFallTime = 0;\r\n\r\n            anim = this.doMove(dt);\r\n        } else if (!this.inFreeFall) {\r\n\r\n            anim = this.doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this.prevAnim !== anim) {\r\n                if (anim.exist) {\r\n                    if (this._isAG) {\r\n                        if (this.prevAnim != null && this.prevAnim.exist) this.prevAnim.ag.stop();\r\n                        anim.ag.play(anim.loop);\r\n                    } else {\r\n                        this.skeleton.beginAnimation(anim.name, anim.loop, anim.rate);\r\n                    }\r\n                }\r\n                this.prevAnim = anim;\r\n            }\r\n        }\r\n        this.updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private jumpTime: number = 0;\r\n    private doJump(dt: number): AnimData {\r\n\r\n        let anim: AnimData = null;\r\n        anim = this.runJump;\r\n        if (this.jumpTime === 0) {\r\n            this.jumpStartPosY = this.avatar.position.y;\r\n        }\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number = this.jumpSpeed - this.gravity * this.jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this.gravity * dt * dt;\r\n        this.jumpTime = this.jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let disp: Vector3;\r\n        this.avatar.rotation.y = -4.69 - this.camera.alpha;\r\n        if (this.wasRunning || this.wasWalking) {\r\n            if (this.wasRunning) {\r\n                forwardDist = this.runSpeed * dt;\r\n            } else if (this.wasWalking) {\r\n                forwardDist = this.walkSpeed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this.moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this.avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //anim=this.fall;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this.avatar.position.y > this.avStartPos.y) || ((this.avatar.position.y === this.avStartPos.y) && (disp.length() > 0.001))) {\r\n                this.endJump();\r\n            } else if (this.avatar.position.y < this.jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                let actDisp: Vector3 = this.avatar.position.subtract(this.avStartPos);\r\n                if (!(this.areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this.verticalSlope(actDisp) <= this.sl) {\r\n                        this.endJump();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private endJump() {\r\n        this.key.jump = false;\r\n        this.jumpTime = 0;\r\n        this.wasWalking = false;\r\n        this.wasRunning = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private movFallTime: number = 0;\r\n\r\n    private doMove(dt: number): AnimData {\r\n\r\n        //initial down velocity\r\n        let u: number = this.movFallTime * this.gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this.freeFallDist = u * dt + this.gravity * dt * dt / 2;\r\n\r\n        this.movFallTime = this.movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: AnimData = null;\r\n\r\n        if (this.inFreeFall) {\r\n            this.moveVector.y = -this.freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this.wasWalking = false;\r\n            this.wasRunning = false;\r\n\r\n            if (this.key.forward) {\r\n                let forwardDist: number = 0;\r\n                if (this.key.shift) {\r\n                    this.wasRunning = true;\r\n                    forwardDist = this.runSpeed * dt;\r\n                    anim = this.run;\r\n                } else {\r\n                    this.wasWalking = true;\r\n                    forwardDist = this.walkSpeed * dt;\r\n                    anim = this.walk;\r\n                }\r\n                this.moveVector = this.avatar.calcMovePOV(0, -this.freeFallDist, forwardDist);\r\n                moving = true;\r\n            } else if (this.key.backward) {\r\n                this.moveVector = this.avatar.calcMovePOV(0, -this.freeFallDist, -(this.backSpeed * dt));\r\n                anim = this.walkBack;\r\n                moving = true;\r\n            } else if (this.key.stepLeft) {\r\n                anim = this.strafeLeft;\r\n                this.moveVector = this.avatar.calcMovePOV(-(this.leftSpeed * dt), -this.freeFallDist, 0);\r\n                moving = true;\r\n            } else if (this.key.stepRight) {\r\n                anim = this.strafeRight;\r\n                this.moveVector = this.avatar.calcMovePOV((this.rightSpeed * dt), -this.freeFallDist, 0);\r\n                moving = true;\r\n            }\r\n        }\r\n\r\n        if (!this.key.stepLeft && !this.key.stepRight) {\r\n            if (this.key.turnLeft) {\r\n                this.camera.alpha = this.camera.alpha + 0.022;\r\n                if (!moving) {\r\n                    this.avatar.rotation.y = -4.69 - this.camera.alpha;\r\n                    anim = this.turnLeft;\r\n                }\r\n            } else if (this.key.turnRight) {\r\n                this.camera.alpha = this.camera.alpha - 0.022;\r\n                if (!moving) {\r\n                    this.avatar.rotation.y = -4.69 - this.camera.alpha;\r\n                    anim = this.turnRight;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (moving) {\r\n            this.avatar.rotation.y = -4.69 - this.camera.alpha;\r\n\r\n            if (this.moveVector.length() > 0.001) {\r\n                this.avatar.moveWithCollisions(this.moveVector);\r\n                //walking up a slope\r\n                if (this.avatar.position.y > this.avStartPos.y) {\r\n                    let actDisp: Vector3 = this.avatar.position.subtract(this.avStartPos);\r\n                    let _sl: number = this.verticalSlope(actDisp);\r\n                    if (_sl >= this.sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this.avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this.avatar.position.y - this.avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this.avatar.position.copyFrom(this._vMovStartPos);\r\n                                this.endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this.avatar.position.copyFrom(this.avStartPos);\r\n                            this.endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_sl > this.sl) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this.fallFrameCount = 0;\r\n                            this.inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this.endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this.avatar.position.y) < this.avStartPos.y) {\r\n                    let actDisp: Vector3 = this.avatar.position.subtract(this.avStartPos);\r\n                    if (!(this.areVectorsEqual(actDisp, this.moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this.verticalSlope(actDisp) <= this.sl) {\r\n                            this.endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this.fallFrameCount = 0;\r\n                            this.inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this.inFreeFall = true;\r\n                        this.fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this.fallFrameCount > this.fallFrameCountMin) {\r\n                            anim = this.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private endFreeFall(): void {\r\n        this.movFallTime = 0;\r\n        this.fallFrameCount = 0;\r\n        this.inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private idleFallTime: number = 0;\r\n    private doIdle(dt: number): AnimData {\r\n        if (this.grounded) {\r\n            return this.idle;\r\n        }\r\n        this.wasWalking = false;\r\n        this.wasRunning = false;\r\n        this.movFallTime = 0;\r\n        let anim: AnimData = this.idle;\r\n        this.fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this.freeFallDist = 5;\r\n        } else {\r\n            let u: number = this.idleFallTime * this.gravity\r\n            this.freeFallDist = u * dt + this.gravity * dt * dt / 2;\r\n            this.idleFallTime = this.idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this.freeFallDist < 0.01) return anim;\r\n        let disp: Vector3 = new Vector3(0, -this.freeFallDist, 0);;\r\n        this.avatar.rotation.y = -4.69 - this.camera.alpha;\r\n        this.avatar.moveWithCollisions(disp);\r\n        if ((this.avatar.position.y > this.avStartPos.y) || (this.avatar.position.y === this.avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this.groundIt();\r\n        } else if (this.avatar.position.y < this.avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            let actDisp: Vector3 = this.avatar.position.subtract(this.avStartPos);\r\n            if (!(this.areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this.verticalSlope(actDisp) <= this.sl) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this.groundIt();\r\n                    this.avatar.position.copyFrom(this.avStartPos);\r\n                } else {\r\n                    this.unGroundIt();\r\n                    anim = this.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private groundFrameCount = 0;\r\n    private groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private groundIt(): void {\r\n        this.groundFrameCount++;\r\n        if (this.groundFrameCount > this.groundFrameMax) {\r\n            this.grounded = true;\r\n            this.idleFallTime = 0;\r\n        }\r\n    }\r\n    private unGroundIt() {\r\n        this.grounded = false;\r\n        this.groundFrameCount = 0;\r\n    }\r\n\r\n    savedCameraCollision: boolean = true;\r\n    private updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this.avatar.position.addToRef(this.cameraTarget, this.camera.target);\r\n\r\n        if (this.camera.radius > this.camera.lowerRadiusLimit) { if (this.elasticCamera) this.snapCamera(); }\r\n\r\n        if (this.camera.radius <= this.camera.lowerRadiusLimit) {\r\n            if (!this.noFirstPerson) {\r\n                this.avatar.visibility = 0;\r\n                this.camera.checkCollisions = false;\r\n            }\r\n        } else {\r\n            this.avatar.visibility = 1;\r\n            this.camera.checkCollisions = this.savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    cameraSkin: number = 0.5;\r\n    skip: number = 0;\r\n    private snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this.camera.position.subtractToRef(this.camera.target, this.rayDir);\r\n        //start ray from av to camera\r\n        this.ray.origin = this.camera.target;\r\n        this.ray.length = this.rayDir.length();\r\n        this.ray.direction = this.rayDir.normalize();\r\n\r\n        let pi: PickingInfo = this.scene.pickWithRay(this.ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this.avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this.camera.checkCollisions) {\r\n                let newPos: Vector3 = this.camera.target.subtract(pi.pickedPoint).normalize().scale(this.cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this.camera.position);\r\n            } else {\r\n                let nr: number = pi.pickedPoint.subtract(this.camera.target).length();\r\n                this.camera.radius = nr - this.cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this.key.forward || this.key.backward || this.key.turnLeft || this.key.turnRight || this.key.stepLeft || this.key.stepRight);\r\n    }\r\n\r\n    private onKeyDown(e: Event) {\r\n        var event: KeyboardEvent = <KeyboardEvent>e;\r\n        var code: number = event.keyCode;\r\n        var chr: string = String.fromCharCode(code);\r\n\r\n        if ((chr === this.jumpKey) || (code === this.jumpCode)) this.key.jump = true;\r\n        else if (code === 16) this.key.shift = true;\r\n        //WASD or arrow keys\r\n        else if ((chr === this.walkKey) || (code === this.walkCode)) this.key.forward = true;\r\n        else if ((chr === this.turnLeftKey) || (code === this.turnLeftCode)) this.key.turnLeft = true;\r\n        else if ((chr === this.turnRightKey) || (code === this.turnRightCode)) this.key.turnRight = true;\r\n        else if ((chr === this.walkBackKey) || (code === this.walkBackCode)) this.key.backward = true;\r\n        else if ((chr === this.strafeLeftKey) || (code === this.strafeLeftCode)) this.key.stepLeft = true;\r\n        else if ((chr === this.strafeRightKey) || (code === this.strafeRightCode)) this.key.stepRight = true;\r\n        this.move = this.anyMovement();\r\n    }\r\n\r\n    private onKeyUp(e: Event) {\r\n        var event: KeyboardEvent = <KeyboardEvent>e;\r\n        var code: number = event.keyCode;\r\n        var chr: string = String.fromCharCode(code);\r\n\r\n        if (code === 16) { this.key.shift = false; }\r\n        //WASD or arrow keys\r\n        else if ((chr === this.walkKey) || (code === this.walkCode)) this.key.forward = false;\r\n        else if ((chr === this.turnLeftKey) || (code === this.turnLeftCode)) this.key.turnLeft = false;\r\n        else if ((chr === this.turnRightKey) || (code === this.turnRightCode)) this.key.turnRight = false;\r\n        else if ((chr === this.walkBackKey) || (code === this.walkBackCode)) this.key.backward = false;\r\n        else if ((chr === this.strafeLeftKey) || (code === this.strafeLeftCode)) this.key.stepLeft = false;\r\n        else if ((chr === this.strafeRightKey) || (code === this.strafeRightCode)) this.key.stepRight = false;\r\n\r\n        this.move = this.anyMovement();\r\n    }\r\n\r\n    private key: Key;\r\n    private renderer: () => void;\r\n    private handleKeyUp: (e) => void;\r\n    private handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    private _hasAnims: boolean = false;\r\n    /**\r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param agMap map of animationRange name to animationRange\r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, agMap?: {}) {\r\n\r\n        this.avatar = avatar;\r\n        this.scene = scene;\r\n\r\n        if (agMap != null) {\r\n            this._isAG = true;\r\n            this.setAnimationGroups(agMap);\r\n        }\r\n\r\n        if (this._isAG || this.skeleton !== null) {\r\n            this._hasAnims = true;\r\n        }\r\n\r\n        if (!this._isAG) this.skeleton = avatar.skeleton;\r\n\r\n        if (!this._isAG && this.skeleton != null) this.checkAnims(this.skeleton);\r\n        this.camera = camera;\r\n        this.savedCameraCollision = this.camera.checkCollisions;\r\n\r\n        this.key = new Key();\r\n\r\n        this.renderer = () => { this.moveAVandCamera() };\r\n        this.handleKeyUp = (e) => { this.onKeyUp(e) };\r\n        this.handleKeyDown = (e) => { this.onKeyDown(e) };\r\n\r\n        window.addEventListener(\"keyup\", this.handleKeyUp, false);\r\n        window.addEventListener(\"keydown\", this.handleKeyDown, false);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport class AnimData {\r\n    public name: string;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n    public ag: AnimationGroup;\r\n    public exist: boolean = false;\r\n\r\n    public constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class Key {\r\n    public forward: boolean;\r\n    public backward: boolean;\r\n    public turnRight: boolean;\r\n    public turnLeft: boolean;\r\n    public stepRight: boolean;\r\n    public stepLeft: boolean;\r\n    public jump: boolean;\r\n    public shift: boolean;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.forward = false;\r\n        this.backward = false;\r\n        this.turnRight = false;\r\n        this.turnLeft = false;\r\n        this.stepRight = false;\r\n        this.stepLeft = false;\r\n        this.jump = false;\r\n        this.shift = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}