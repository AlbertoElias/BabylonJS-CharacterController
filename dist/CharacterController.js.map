{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CharacterController","AnimData","Key","babylonjs__WEBPACK_IMPORTED_MODULE_0__","avatar","camera","scene","_this","this","walkSpeed","runSpeed","backSpeed","jumpSpeed","leftSpeed","rightSpeed","gravity","minSlopeLimit","maxSlopeLimit","sl","Math","PI","sl2","_stepOffset","_vMoveTot","_vMovStartPos","walk","walkBack","idle","idleJump","run","runJump","fall","turnLeft","turnRight","strafeLeft","strafeRight","slideBack","anims","walkKey","walkBackKey","turnLeftKey","turnRightKey","strafeLeftKey","strafeRightKey","jumpKey","walkCode","walkBackCode","turnLeftCode","turnRightCode","strafeLeftCode","strafeRightCode","jumpCode","elasticCamera","cameraTarget","noFirstPerson","started","_stopAnim","prevAnim","avStartPos","grounded","freeFallDist","fallFrameCountMin","fallFrameCount","inFreeFall","wasWalking","wasRunning","jumpStartPosY","jumpTime","movFallTime","idleFallTime","groundFrameCount","groundFrameMax","savedCameraCollision","ray","Zero","One","rayDir","cameraSkin","skip","move","_ellipsoid","ellipsoid","clone","skeleton","checkAnims","checkCollisions","renderer","moveAVandCamera","handleKeyUp","e","onKeyUp","handleKeyDown","onKeyDown","addEventListener","setAvatar","setAvatarSkeleton","setSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","setRunSpeed","setBackSpeed","setJumpSpeed","setLeftSpeed","setRightSpeed","setGravity","setAnim","anim","rangeName","rate","loop","getAnimationRange","exist","setWalkAnim","setRunAnim","setWalkBackAnim","setSlideBackAnim","setIdleAnim","setTurnRightAnim","setTurnLeftAnim","setStrafeRightAnim","setSrafeLeftAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","setWalkKey","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","setWalkCode","code","setWalkBackCode","setTurnLeftCode","setTurnRightCode","setStrafeLeftCode","setStrafeRightCode","setJumpCode","setCameraElasticity","b","setCameraTarget","v","copyFrom","cameraCollisionChanged","setNoFirstPerson","skel","_i","_a","length","start","reset","updateTargetValue","registerBeforeRender","stop","unregisterBeforeRender","removeEventListener","pauseAnim","resumeAnim","position","dt","getEngine","getDeltaTime","jump","doJump","anyMovement","doMove","doIdle","beginAnimation","y","jumpDist","disp","forwardDist","rotation","alpha","moveVector","normalize","scaleToRef","moveWithCollisions","endJump","actDisp","subtract","areVectorsEqual","verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","forward","shift","calcMovePOV","backward","stepLeft","stepRight","_sl","endFreeFall","groundIt","unGroundIt","addToRef","target","radius","lowerRadiusLimit","snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","mesh","hit","newPos","pickedPoint","scale","nr","keyCode","chr","String","fromCharCode"],"mappings":"CAAA,SAAAA,EAAAC,GACA,oBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,mBACA,sBAAAC,eAAAC,IACAD,OAAA,cAAAJ,OACA,CACA,IAAAM,EAAA,iBAAAL,QAAAD,EAAAG,QAAA,cAAAH,EAAAD,EAAA,SACA,QAAAQ,KAAAD,GAAA,iBAAAL,gBAAAF,GAAAQ,GAAAD,EAAAC,IAPA,CASCC,OAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAX,QAGA,IAAAC,EAAAQ,EAAAE,GAAA,CACAL,EAAAK,EACAC,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAF,GAAAG,KAAAb,EAAAD,QAAAC,IAAAD,QAAAU,GAGAT,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAU,EAAAK,EAAAF,EAGAH,EAAAM,EAAAP,EAGAC,EAAAO,EAAA,SAAAjB,EAAAkB,EAAAC,GACAT,EAAAU,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CT,EAAAe,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,KAAiD4B,OAAA,KAQjDlB,EAAAmB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAlB,EAAAkB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,EAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAvB,EAAAe,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAlB,EAAAO,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAtB,EAAA0B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,EACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAS,EAAAO,EAAAE,EAAA,IAAAA,GACAA,GAIAT,EAAAU,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD5B,EAAA+B,EAAA,GAIA/B,IAAAgC,EAAA,mBClFAzC,EAAAD,QAAAQ,gCCAAE,EAAAe,EAAAkB,GAAAjC,EAAAO,EAAA0B,EAAA,wCAAAC,IAAAlC,EAAAO,EAAA0B,EAAA,6BAAAE,IAAAnC,EAAAO,EAAA0B,EAAA,wBAAAG,IAAA,IAAAC,EAAArC,EAAA,GAUAkC,EAAA,WA2OI,SAAAA,EAAYI,EAAaC,EAAwBC,GAAjD,IAAAC,EAAAC,KAnOQA,KAAAC,UAAkB,EAClBD,KAAAE,SAAgC,EAAfF,KAAKC,UACtBD,KAAAG,UAAkBH,KAAKC,UAAU,EACjCD,KAAAI,UAAiC,EAAfJ,KAAKC,UACvBD,KAAAK,UAAkBL,KAAKC,UAAU,EACjCD,KAAAM,WAAmBN,KAAKC,UAAU,EAClCD,KAAAO,QAAgB,IAEhBP,KAAAQ,cAAsB,GACtBR,KAAAS,cAAsB,GAE9BT,KAAAU,GAAWC,KAAKC,GAAGZ,KAAKQ,cAAc,IACtCR,KAAAa,IAAYF,KAAKC,GAAGZ,KAAKS,cAAc,IAG/BT,KAAAc,EAAoB,IAEpBd,KAAAe,EAAkB,EAElBf,KAAAgB,EAAuB,IAAIrB,EAAA,QAAQ,EAAE,EAAE,GAGvCK,KAAAiB,KAAe,IAAIxB,EAAS,QAC5BO,KAAAkB,SAAmB,IAAIzB,EAAS,YAChCO,KAAAmB,KAAe,IAAI1B,EAAS,QAC5BO,KAAAoB,SAAmB,IAAI3B,EAAS,YAChCO,KAAAqB,IAAc,IAAI5B,EAAS,OAC3BO,KAAAsB,QAAkB,IAAI7B,EAAS,WAC/BO,KAAAuB,KAAe,IAAI9B,EAAS,QAC5BO,KAAAwB,SAAmB,IAAI/B,EAAS,YAChCO,KAAAyB,UAAoB,IAAIhC,EAAS,aACjCO,KAAA0B,WAAqB,IAAIjC,EAAS,cAClCO,KAAA2B,YAAsB,IAAIlC,EAAS,eACnCO,KAAA4B,UAAoB,IAAInC,EAAS,aAEjCO,KAAA6B,MAAkB,CAAC7B,KAAKiB,KAAKjB,KAAKkB,SAASlB,KAAKmB,KAAKnB,KAAKqB,IAAIrB,KAAKsB,QAAQtB,KAAKuB,KAAKvB,KAAKwB,SAASxB,KAAKyB,UAAUzB,KAAK0B,WAAW1B,KAAK2B,YAAY3B,KAAK4B,WAGxJ5B,KAAA8B,QAAgB,IAChB9B,KAAA+B,YAAoB,IACpB/B,KAAAgC,YAAoB,IACpBhC,KAAAiC,aAAqB,IACrBjC,KAAAkC,cAAsB,IACtBlC,KAAAmC,eAAuB,IACvBnC,KAAAoC,QAAgB,KAChBpC,KAAAqC,SAAiB,GACjBrC,KAAAsC,aAAqB,GACrBtC,KAAAuC,aAAqB,GACrBvC,KAAAwC,cAAsB,GACtBxC,KAAAyC,eAAuB,EACvBzC,KAAA0C,gBAAwB,EACxB1C,KAAA2C,SAAiB,GAEjB3C,KAAA4C,eAAuB,EACvB5C,KAAA6C,aAAsB,IAAIlD,EAAA,QAAQ,EAAE,EAAE,GAEtCK,KAAA8C,eAAuB,EAmMvB9C,KAAA+C,SAAiB,EAiCjB/C,KAAAgD,GAAmB,EAcnBhD,KAAAiD,SAAmB,KAEnBjD,KAAAkD,WAAoB,IAAIvD,EAAA,QAAQ,EAAE,EAAE,GACpCK,KAAAmD,UAAkB,EAElBnD,KAAAoD,aAAqB,EAMrBpD,KAAAqD,kBAA0B,GAC1BrD,KAAAsD,eAAuB,EAEvBtD,KAAAuD,YAAoB,EACpBvD,KAAAwD,YAAoB,EACpBxD,KAAAyD,YAAoB,EAuCpBzD,KAAA0D,cAAsB,EAEtB1D,KAAA2D,SAAiB,EAuFjB3D,KAAA4D,YAAoB,EAgJpB5D,KAAA6D,aAAqB,EAsDrB7D,KAAA8D,iBAAiB,EACjB9D,KAAA+D,eAAe,GAiBvB/D,KAAAgE,sBAA8B,EAmB9BhE,KAAAiE,IAAS,IAAItE,EAAA,IAAIA,EAAA,QAAQuE,OAAOvE,EAAA,QAAQwE,MAAM,GAC9CnE,KAAAoE,OAAgBzE,EAAA,QAAQuE,OAGxBlE,KAAAqE,WAAmB,GACnBrE,KAAAsE,KAAa,EAgCbtE,KAAAuE,MAAc,EAreVvE,KAAKJ,OAAOA,EACZI,KAAKF,MAAMA,EACXE,KAAKwE,EAAWxE,KAAKJ,OAAO6E,UAAUC,QAEtC1E,KAAK2E,SAAS/E,EAAO+E,SACH,MAAf3E,KAAK2E,UAAgB3E,KAAK4E,WAAW5E,KAAK2E,UAC7C3E,KAAKH,OAAOA,EACZG,KAAKgE,qBAAqBhE,KAAKH,OAAOgF,gBAEtC7E,KAAKlB,IAAI,IAAIY,EAGbM,KAAK8E,SAAS,WAAO/E,EAAKgF,mBAC1B/E,KAAKgF,YAAY,SAACC,GAAOlF,EAAKmF,QAAQD,IACtCjF,KAAKmF,cAAc,SAACF,GAAOlF,EAAKqF,UAAUH,IAE1C9H,OAAOkI,iBAAiB,QAAQrF,KAAKgF,aAAY,GACjD7H,OAAOkI,iBAAiB,UAAUrF,KAAKmF,eAAc,GA0f7D,OAtrBW3F,EAAAL,UAAAmG,UAAP,SAAiB1F,GACbI,KAAKJ,OAAOA,GAGTJ,EAAAL,UAAAoG,kBAAP,SAAyBZ,GACrB3E,KAAK2E,SAASA,EACd3E,KAAK4E,WAAWD,IAGbnF,EAAAL,UAAAqG,cAAP,SAAqBhF,EAAsBC,GACvCT,KAAKQ,cAAcA,EACnBR,KAAKS,cAAcA,EAEnBT,KAAKU,GAAGC,KAAKC,GAAGJ,EAAc,IAC9BR,KAAKa,IAAIF,KAAKC,GAAGZ,KAAKS,cAAc,KAOjCjB,EAAAL,UAAAsG,cAAP,SAAqBC,GACjB1F,KAAKc,EAAY4E,GAGdlG,EAAAL,UAAAwG,aAAP,SAAoB3G,GAChBgB,KAAKC,UAAUjB,GAEZQ,EAAAL,UAAAyG,YAAP,SAAmB5G,GACfgB,KAAKE,SAASlB,GAEXQ,EAAAL,UAAA0G,aAAP,SAAoB7G,GAChBgB,KAAKG,UAAUnB,GAEZQ,EAAAL,UAAA2G,aAAP,SAAoB9G,GAChBgB,KAAKI,UAAUpB,GAEZQ,EAAAL,UAAA4G,aAAP,SAAoB/G,GAChBgB,KAAKK,UAAUrB,GAEZQ,EAAAL,UAAA6G,cAAP,SAAqBhH,GACjBgB,KAAKM,WAAWtB,GAEbQ,EAAAL,UAAA8G,WAAP,SAAkBjH,GACdgB,KAAKO,QAAQvB,GAGVQ,EAAAL,UAAA+G,QAAP,SAAeC,EAAeC,EAAkBC,EAAaC,GACvC,MAAftG,KAAK2E,WACRwB,EAAKrI,KAAKsI,EACVD,EAAKE,KAAKA,EACVF,EAAKG,KAAKA,EACqC,MAA5CtG,KAAK2E,SAAS4B,kBAAkBJ,EAAKrI,MACpCqI,EAAKK,OAAM,EAEXL,EAAKK,OAAM,IAIZhH,EAAAL,UAAAsH,YAAP,SAAmBL,EAAkBC,EAAaC,GAC9CtG,KAAKkG,QAAQlG,KAAKiB,KAAKmF,EAAUC,EAAKC,IAEnC9G,EAAAL,UAAAuH,WAAP,SAAkBN,EAAkBC,EAAaC,GAC7CtG,KAAKkG,QAAQlG,KAAKqB,IAAI+E,EAAUC,EAAKC,IAElC9G,EAAAL,UAAAwH,gBAAP,SAAuBP,EAAkBC,EAAaC,GAClDtG,KAAKkG,QAAQlG,KAAKkB,SAASkF,EAAUC,EAAKC,IAEvC9G,EAAAL,UAAAyH,iBAAP,SAAwBR,EAAkBC,EAAaC,GACnDtG,KAAKkG,QAAQlG,KAAK4B,UAAUwE,EAAUC,EAAKC,IAExC9G,EAAAL,UAAA0H,YAAP,SAAmBT,EAAkBC,EAAaC,GAC9CtG,KAAKkG,QAAQlG,KAAKmB,KAAKiF,EAAUC,EAAKC,IAEnC9G,EAAAL,UAAA2H,iBAAP,SAAwBV,EAAkBC,EAAaC,GACnDtG,KAAKkG,QAAQlG,KAAKyB,UAAU2E,EAAUC,EAAKC,IAExC9G,EAAAL,UAAA4H,gBAAP,SAAuBX,EAAkBC,EAAaC,GAClDtG,KAAKkG,QAAQlG,KAAKwB,SAAS4E,EAAUC,EAAKC,IAEvC9G,EAAAL,UAAA6H,mBAAP,SAA0BZ,EAAkBC,EAAaC,GACrDtG,KAAKkG,QAAQlG,KAAK2B,YAAYyE,EAAUC,EAAKC,IAE1C9G,EAAAL,UAAA8H,iBAAP,SAAwBb,EAAkBC,EAAaC,GACnDtG,KAAKkG,QAAQlG,KAAK0B,WAAW0E,EAAUC,EAAKC,IAEzC9G,EAAAL,UAAA+H,gBAAP,SAAuBd,EAAkBC,EAAaC,GAClDtG,KAAKkG,QAAQlG,KAAKoB,SAASgF,EAAUC,EAAKC,IAEvC9G,EAAAL,UAAAgI,eAAP,SAAsBf,EAAkBC,EAAaC,GACjDtG,KAAKkG,QAAQlG,KAAKsB,QAAQ8E,EAAUC,EAAKC,IAEtC9G,EAAAL,UAAAiI,YAAP,SAAmBhB,EAAkBC,EAAaC,GAC9CtG,KAAKkG,QAAQlG,KAAKuB,KAAK6E,EAAUC,EAAKC,IAGnC9G,EAAAL,UAAAkI,WAAP,SAAkBvI,GACdkB,KAAK8B,QAAQhD,GAEVU,EAAAL,UAAAmI,eAAP,SAAsBxI,GAClBkB,KAAK+B,YAAYjD,GAEdU,EAAAL,UAAAoI,eAAP,SAAsBzI,GAClBkB,KAAKgC,YAAYlD,GAEdU,EAAAL,UAAAqI,gBAAP,SAAuB1I,GACnBkB,KAAKiC,aAAanD,GAEfU,EAAAL,UAAAsI,iBAAP,SAAwB3I,GACpBkB,KAAKkC,cAAcpD,GAEhBU,EAAAL,UAAAuI,kBAAP,SAAyB5I,GACrBkB,KAAKmC,eAAerD,GAEjBU,EAAAL,UAAAwI,WAAP,SAAkB7I,GACdkB,KAAKoC,QAAQtD,GAGVU,EAAAL,UAAAyI,YAAP,SAAmBC,GACf7H,KAAKqC,SAASwF,GAEXrI,EAAAL,UAAA2I,gBAAP,SAAuBD,GACnB7H,KAAKsC,aAAauF,GAEfrI,EAAAL,UAAA4I,gBAAP,SAAuBF,GACnB7H,KAAKuC,aAAasF,GAEfrI,EAAAL,UAAA6I,iBAAP,SAAwBH,GACpB7H,KAAKwC,cAAcqF,GAEhBrI,EAAAL,UAAA8I,kBAAP,SAAyBJ,GACrB7H,KAAKyC,eAAeoF,GAEjBrI,EAAAL,UAAA+I,mBAAP,SAA0BL,GACtB7H,KAAK0C,gBAAgBmF,GAElBrI,EAAAL,UAAAgJ,YAAP,SAAmBN,GACf7H,KAAK2C,SAASkF,GAGXrI,EAAAL,UAAAiJ,oBAAP,SAA2BC,GACvBrI,KAAK4C,cAAcyF,GAEhB7I,EAAAL,UAAAmJ,gBAAP,SAAuBC,GACnBvI,KAAK6C,aAAa2F,SAASD,IAOxB/I,EAAAL,UAAAsJ,uBAAP,WACIzI,KAAKgE,qBAAqBhE,KAAKH,OAAOgF,iBAEnCrF,EAAAL,UAAAuJ,iBAAP,SAAwBL,GACpBrI,KAAK8C,cAAcuF,GAGf7I,EAAAL,UAAAyF,WAAR,SAAmB+D,GACf,IAAgB,IAAAC,EAAA,EAAAC,EAAA7I,KAAK6B,MAAL+G,EAAAC,EAAAC,OAAAF,IAAY,CAAxB,IAAIzC,EAAI0C,EAAAD,GAC8B,MAAnCD,EAAKpC,kBAAkBJ,EAAKrI,QAAaqI,EAAKK,OAAM,KAkCxDhH,EAAAL,UAAA4J,MAAP,WACO/I,KAAK+C,UACR/C,KAAK+C,SAAQ,EACb/C,KAAKlB,IAAIkK,QACThJ,KAAK4D,YAAY,EAEjB5D,KAAK6D,aAAa,KAClB7D,KAAKmD,UAAS,EACdnD,KAAKiJ,oBAEL9L,OAAOkI,iBAAiB,QAAQrF,KAAKgF,aAAY,GACjD7H,OAAOkI,iBAAiB,UAAUrF,KAAKmF,eAAc,GAErDnF,KAAKF,MAAMoJ,qBAAqBlJ,KAAK8E,UACrC9E,KAAKF,QAGFN,EAAAL,UAAAgK,KAAP,WACQnJ,KAAK+C,UACT/C,KAAK+C,SAAQ,EACb/C,KAAKF,MAAMsJ,uBAAuBpJ,KAAK8E,UACvC3H,OAAOkM,oBAAoB,QAAQrJ,KAAKgF,aAAY,GACpD7H,OAAOkM,oBAAoB,UAAUrJ,KAAKmF,eAAc,GACxDnF,KAAKiD,SAAS,OAUXzD,EAAAL,UAAAmK,UAAP,WACItJ,KAAKgD,GAAU,GAQZxD,EAAAL,UAAAoK,WAAP,WACIvJ,KAAKgD,GAAU,GAsBXxD,EAAAL,UAAA4F,gBAAR,WACI/E,KAAKkD,WAAWsF,SAASxI,KAAKJ,OAAO4J,UACrC,IAAIrD,EAAe,KACfsD,EAAWzJ,KAAKF,MAAM4J,YAAYC,eAAe,IAElD3J,KAAKlB,IAAI8K,OAAO5J,KAAKuD,YACpBvD,KAAKmD,UAAS,EACdnD,KAAK6D,aAAa,EAElBsC,EAAKnG,KAAK6J,OAAOJ,IACXzJ,KAAK8J,eAAe9J,KAAKuD,YAC/BvD,KAAKmD,UAAS,EACdnD,KAAK6D,aAAa,EAElBsC,EAAKnG,KAAK+J,OAAON,IACVzJ,KAAKuD,aAEZ4C,EAAKnG,KAAKgK,OAAOP,IAEjBzJ,KAAKgD,GACI,MAANmD,GACoB,OAAhBnG,KAAK2E,UACD3E,KAAKiD,WAAWkD,IACZA,EAAKK,OACJxG,KAAK2E,SAASsF,eAAe9D,EAAKrI,KAAKqI,EAAKG,KAAKH,EAAKE,MAE1DrG,KAAKiD,SAASkD,GAK9BnG,KAAKiJ,qBAQDzJ,EAAAL,UAAA0K,OAAR,SAAeJ,GAEX,IAAItD,EAAe,KACnBA,EAAKnG,KAAKsB,QACS,IAAhBtB,KAAK2D,WACJ3D,KAAK0D,cAAc1D,KAAKJ,OAAO4J,SAASU,GAG5C,IAEIC,GAFWnK,KAAKI,UAAUJ,KAAKO,QAAQP,KAAK2D,UAExB8F,EAAG,GAAIzJ,KAAKO,QAAQkJ,EAAGA,EAC/CzJ,KAAK2D,SAAS3D,KAAK2D,SAAS8F,EAE5B,IACIW,EADAC,EAAoB,EAsBxB,GApBArK,KAAKJ,OAAO0K,SAASJ,GAAG,KAAKlK,KAAKH,OAAO0K,MACtCvK,KAAKyD,YAAYzD,KAAKwD,YAClBxD,KAAKyD,WACJ4G,EAAYrK,KAAKE,SAASuJ,EACpBzJ,KAAKwD,aACX6G,EAAYrK,KAAKC,UAAUwJ,IAG/BW,EAAKpK,KAAKwK,WAAW9F,SAChBwF,EAAE,GACPE,EAAKA,EAAKK,aACLC,WAAWL,EAAYD,GAC5BA,EAAKF,EAAEC,IAEPC,EAAK,IAAIzK,EAAA,QAAQ,EAAEwK,EAAS,GAC5BhE,EAAKnG,KAAKoB,UAIdpB,KAAKJ,OAAO+K,mBAAmBP,GAC5BD,EAAS,EAIR,GAAInK,KAAKJ,OAAO4J,SAASU,EAAElK,KAAKkD,WAAWgH,GAAMlK,KAAKJ,OAAO4J,SAASU,IAAIlK,KAAKkD,WAAWgH,GAAKE,EAAKtB,SAAS,KACzG9I,KAAK4K,eACF,GAAG5K,KAAKJ,OAAO4J,SAASU,EAAElK,KAAK0D,cAAe,CAMjD,IAAImH,EAAiB7K,KAAKJ,OAAO4J,SAASsB,SAAS9K,KAAKkD,YACnDlD,KAAK+K,gBAAgBF,EAAQT,EAAK,OAIhCpK,KAAKgL,cAAcH,IAAU7K,KAAKU,IACjCV,KAAK4K,UAKrB,OAAOzE,GAMH3G,EAAAL,UAAAyL,QAAR,WACI5K,KAAKlB,IAAI8K,MAAK,EACd5J,KAAK2D,SAAS,EACd3D,KAAKwD,YAAW,EAChBxD,KAAKyD,YAAW,GAOZjE,EAAAL,UAAA4L,gBAAR,SAAwBE,EAAYC,EAAY7L,GAC5C,OAASsB,KAAKwK,IAAIF,EAAGG,EAAEF,EAAGE,GAAG/L,GAAKsB,KAAKwK,IAAIF,EAAGf,EAAEgB,EAAGhB,GAAG7K,GAAKsB,KAAKwK,IAAIF,EAAGI,EAAEH,EAAGG,GAAGhM,GAK3EG,EAAAL,UAAA6L,cAAR,SAAsBzC,GAClB,OAAO5H,KAAK2K,KAAK3K,KAAKwK,IAAI5C,EAAE2B,EAAEvJ,KAAK4K,KAAKhD,EAAE6C,EAAE7C,EAAE6C,EAAE7C,EAAE8C,EAAE9C,EAAE8C,MAMlD7L,EAAAL,UAAA4K,OAAR,SAAeN,GAGX,IAAI+B,EAAUxL,KAAK4D,YAAY5D,KAAKO,QAGpCP,KAAKoD,aAAaoI,EAAE/B,EAAGzJ,KAAKO,QAAQkJ,EAAGA,EAAG,EAE1CzJ,KAAK4D,YAAY5D,KAAK4D,YAAY6F,EAElC,IAAIgC,GAAgB,EAChBtF,EAAe,KAEnB,GAAGnG,KAAKuD,WACJvD,KAAKwK,WAAWN,GAAGlK,KAAKoD,aACxBqI,GAAO,OAKP,GAHAzL,KAAKwD,YAAW,EAChBxD,KAAKyD,YAAW,EAEbzD,KAAKlB,IAAI4M,QAAS,CACjB,IAAIrB,EAAoB,EACrBrK,KAAKlB,IAAI6M,OACR3L,KAAKyD,YAAW,EAChB4G,EAAYrK,KAAKE,SAASuJ,EAC1BtD,EAAKnG,KAAKqB,MAEVrB,KAAKwD,YAAW,EAChB6G,EAAYrK,KAAKC,UAAUwJ,EAC3BtD,EAAKnG,KAAKiB,MAEdjB,KAAKwK,WAAWxK,KAAKJ,OAAOgM,YAAY,GAAG5L,KAAKoD,aAAaiH,GAC7DoB,GAAO,OACDzL,KAAKlB,IAAI+M,UACf7L,KAAKwK,WAAWxK,KAAKJ,OAAOgM,YAAY,GAAG5L,KAAKoD,cAAepD,KAAKG,UAAUsJ,GAC9EtD,EAAKnG,KAAKkB,SACVuK,GAAO,GACDzL,KAAKlB,IAAIgN,UACf3F,EAAKnG,KAAK0B,WACV1B,KAAKwK,WAAWxK,KAAKJ,OAAOgM,aAAc5L,KAAKK,UAAUoJ,GAAKzJ,KAAKoD,aAAa,GAChFqI,GAAO,GACDzL,KAAKlB,IAAIiN,YACf5F,EAAKnG,KAAK2B,YACV3B,KAAKwK,WAAWxK,KAAKJ,OAAOgM,YAAa5L,KAAKM,WAAWmJ,GAAKzJ,KAAKoD,aAAa,GAChFqI,GAAO,GAoBf,GAhBIzL,KAAKlB,IAAIgN,UAAW9L,KAAKlB,IAAIiN,YAC1B/L,KAAKlB,IAAI0C,UACRxB,KAAKH,OAAO0K,MAAMvK,KAAKH,OAAO0K,MAAM,KAChCkB,IACAzL,KAAKJ,OAAO0K,SAASJ,GAAG,KAAKlK,KAAKH,OAAO0K,MACzCpE,EAAKnG,KAAKwB,WAERxB,KAAKlB,IAAI2C,YACfzB,KAAKH,OAAO0K,MAAMvK,KAAKH,OAAO0K,MAAM,KAChCkB,IACAzL,KAAKJ,OAAO0K,SAASJ,GAAG,KAAKlK,KAAKH,OAAO0K,MACzCpE,EAAKnG,KAAKyB,aAKnBgK,IACCzL,KAAKJ,OAAO0K,SAASJ,GAAG,KAAKlK,KAAKH,OAAO0K,MAEtCvK,KAAKwK,WAAW1B,SAAS,MAGxB,GAFA9I,KAAKJ,OAAO+K,mBAAmB3K,KAAKwK,YAEjCxK,KAAKJ,OAAO4J,SAASU,EAAElK,KAAKkD,WAAWgH,EAAG,CACzC,IAAIW,EAAiB7K,KAAKJ,OAAO4J,SAASsB,SAAS9K,KAAKkD,YACpD8I,EAAYhM,KAAKgL,cAAcH,GAChCmB,GAAKhM,KAAKa,IAGNb,KAAKc,EAAY,GACG,GAAhBd,KAAKe,GAEJf,KAAKgB,EAAcwH,SAASxI,KAAKkD,YAErClD,KAAKe,EAAUf,KAAKe,GAAWf,KAAKJ,OAAO4J,SAASU,EAAElK,KAAKkD,WAAWgH,GACnElK,KAAKe,EAAUf,KAAKc,IAEnBd,KAAKe,EAAU,EACff,KAAKJ,OAAO4J,SAAShB,SAASxI,KAAKgB,GACnChB,KAAKiM,iBAITjM,KAAKJ,OAAO4J,SAAShB,SAASxI,KAAKkD,YACnClD,KAAKiM,gBAGTjM,KAAKe,EAAU,EACZiL,EAAIhM,KAAKU,IAERV,KAAKsD,eAAe,EACpBtD,KAAKuD,YAAW,GAGhBvD,KAAKiM,oBAGV,GAAIjM,KAAKJ,OAAO4J,SAAU,EAAExJ,KAAKkD,WAAWgH,EAAG,CAC9CW,EAAiB7K,KAAKJ,OAAO4J,SAASsB,SAAS9K,KAAKkD,YACnDlD,KAAK+K,gBAAgBF,EAAQ7K,KAAKwK,WAAW,OAY9CxK,KAAKuD,YAAW,EAChBvD,KAAKsD,iBAIFtD,KAAKsD,eAAetD,KAAKqD,oBACxB8C,EAAKnG,KAAKuB,OAdXvB,KAAKgL,cAAcH,IAAU7K,KAAKU,GACjCV,KAAKiM,eAGLjM,KAAKsD,eAAe,EACpBtD,KAAKuD,YAAW,QAaxBvD,KAAKiM,cAIjB,OAAO9F,GAGH3G,EAAAL,UAAA8M,YAAR,WACIjM,KAAK4D,YAAY,EACjB5D,KAAKsD,eAAe,EACpBtD,KAAKuD,YAAW,GAKZ/D,EAAAL,UAAA6K,OAAR,SAAeP,GACX,GAAGzJ,KAAKmD,SACJ,OAAOnD,KAAKmB,KAEhBnB,KAAKwD,YAAW,EAChBxD,KAAKyD,YAAW,EAChBzD,KAAK4D,YAAY,EACjB,IAAIuC,EAAenG,KAAKmB,KAIxB,GAHAnB,KAAKsD,eAAe,EAGZ,IAALmG,EACCzJ,KAAKoD,aAAa,MACf,CACH,IAAIoI,EAAUxL,KAAK6D,aAAa7D,KAAKO,QACrCP,KAAKoD,aAAaoI,EAAE/B,EAAGzJ,KAAKO,QAAQkJ,EAAGA,EAAG,EAC1CzJ,KAAK6D,aAAa7D,KAAK6D,aAAa4F,EAIxC,GAAGzJ,KAAKoD,aAAa,IAAM,OAAO+C,EAClC,IAAIiE,EAAc,IAAIzK,EAAA,QAAQ,GAAGK,KAAKoD,aAAa,GAGnD,GAFApD,KAAKJ,OAAO0K,SAASJ,GAAG,KAAKlK,KAAKH,OAAO0K,MACzCvK,KAAKJ,OAAO+K,mBAAmBP,GAC3BpK,KAAKJ,OAAO4J,SAASU,EAAElK,KAAKkD,WAAWgH,GAAKlK,KAAKJ,OAAO4J,SAASU,IAAIlK,KAAKkD,WAAWgH,EAGrFlK,KAAKkM,gBACF,GAAGlM,KAAKJ,OAAO4J,SAASU,EAAElK,KAAKkD,WAAWgH,EAAG,CAMhD,IAAIW,EAAiB7K,KAAKJ,OAAO4J,SAASsB,SAAS9K,KAAKkD,YACnDlD,KAAK+K,gBAAgBF,EAAQT,EAAK,QAIhCpK,KAAKgL,cAAcH,IAAU7K,KAAKU,IAGjCV,KAAKkM,WACLlM,KAAKJ,OAAO4J,SAAShB,SAASxI,KAAKkD,cAEnClD,KAAKmM,aACLhG,EAAKnG,KAAK4B,YAItB,OAAOuE,GASH3G,EAAAL,UAAA+M,SAAR,WACIlM,KAAK8D,mBACF9D,KAAK8D,iBAAiB9D,KAAK+D,iBAC1B/D,KAAKmD,UAAS,EACdnD,KAAK6D,aAAa,IAGlBrE,EAAAL,UAAAgN,WAAR,WACInM,KAAKmD,UAAS,EACdnD,KAAK8D,iBAAiB,GAIlBtE,EAAAL,UAAA8J,kBAAR,WAEuB,GAAhBjJ,KAAKe,GACJf,KAAKJ,OAAO4J,SAAS4C,SAASpM,KAAK6C,aAAa7C,KAAKH,OAAOwM,QAE7DrM,KAAKH,OAAOyM,OAAOtM,KAAKH,OAAO0M,kBAAsBvM,KAAK4C,eAAe5C,KAAKwM,aAE9ExM,KAAKH,OAAOyM,QAAQtM,KAAKH,OAAO0M,iBAC3BvM,KAAK8C,gBACL9C,KAAKJ,OAAO6M,WAAW,EACvBzM,KAAKH,OAAOgF,iBAAgB,IAGhC7E,KAAKJ,OAAO6M,WAAW,EACvBzM,KAAKH,OAAOgF,gBAAgB7E,KAAKgE,uBAUjCxE,EAAAL,UAAAqN,WAAR,eAAAzM,EAAAC,KAOIA,KAAKH,OAAO2J,SAASkD,cAAc1M,KAAKH,OAAOwM,OAAOrM,KAAKoE,QAE3DpE,KAAKiE,IAAI0I,OAAO3M,KAAKH,OAAOwM,OAC5BrM,KAAKiE,IAAI6E,OAAO9I,KAAKoE,OAAO0E,SAC5B9I,KAAKiE,IAAI2I,UAAU5M,KAAKoE,OAAOqG,YAE/B,IAAIoC,EAAgB7M,KAAKF,MAAMgN,YAAY9M,KAAKiE,IAAI,SAAC8I,GAEjD,QAAGA,GAAMhN,EAAKH,SAASmN,EAAKlI,mBAE9B,GAEF,GAAGgI,EAAGG,IAEF,GAAGhN,KAAKH,OAAOgF,gBAAiB,CAC5B,IAAIoI,EAAgBjN,KAAKH,OAAOwM,OAAOvB,SAAS+B,EAAGK,aAAazC,YAAY0C,MAAMnN,KAAKqE,YACvFwI,EAAGK,YAAYd,SAASa,EAAOjN,KAAKH,OAAO2J,cACxC,CACH,IAAI4D,EAAWP,EAAGK,YAAYpC,SAAS9K,KAAKH,OAAOwM,QAAQvD,SAC3D9I,KAAKH,OAAOyM,OAAOc,EAAGpN,KAAKqE,aAMhC7E,EAAAL,UAAA2K,YAAP,WACI,OAAQ9J,KAAKlB,IAAI4M,SAAS1L,KAAKlB,IAAI+M,UAAU7L,KAAKlB,IAAI0C,UAAUxB,KAAKlB,IAAI2C,WAAWzB,KAAKlB,IAAIgN,UAAU9L,KAAKlB,IAAIiN,WAG5GvM,EAAAL,UAAAiG,UAAR,SAAkBH,GACd,IACI4C,EADoC5C,EACjBoI,QACnBC,EAAYC,OAAOC,aAAa3F,GAEhCyF,IAAMtN,KAAKoC,SAAWyF,IAAO7H,KAAK2C,SAAW3C,KAAKlB,IAAI8K,MAAK,EAChD,KAAP/B,EAAW7H,KAAKlB,IAAI6M,OAAM,EAEzB2B,IAAMtN,KAAK8B,SAAW+F,IAAO7H,KAAKqC,SAAWrC,KAAKlB,IAAI4M,SAAQ,EAC9D4B,IAAMtN,KAAKgC,aAAe6F,IAAO7H,KAAKuC,aAAevC,KAAKlB,IAAI0C,UAAS,EACvE8L,IAAMtN,KAAKiC,cAAgB4F,IAAO7H,KAAKwC,cAAgBxC,KAAKlB,IAAI2C,WAAU,EAC1E6L,IAAMtN,KAAK+B,aAAe8F,IAAO7H,KAAKsC,aAAetC,KAAKlB,IAAI+M,UAAS,EACvEyB,IAAMtN,KAAKkC,eAAiB2F,IAAO7H,KAAKyC,eAAiBzC,KAAKlB,IAAIgN,UAAS,EAC3EwB,IAAMtN,KAAKmC,gBAAkB0F,IAAO7H,KAAK0C,kBAAkB1C,KAAKlB,IAAIiN,WAAU,GACvF/L,KAAKuE,KAAKvE,KAAK8J,eAGXtK,EAAAL,UAAA+F,QAAR,SAAgBD,GACZ,IACI4C,EADoC5C,EACjBoI,QACnBC,EAAYC,OAAOC,aAAa3F,GAE1B,KAAPA,EAAY7H,KAAKlB,IAAI6M,OAAM,EAErB2B,IAAMtN,KAAK8B,SAAW+F,IAAO7H,KAAKqC,SAAWrC,KAAKlB,IAAI4M,SAAQ,EAC9D4B,IAAMtN,KAAKgC,aAAe6F,IAAO7H,KAAKuC,aAAevC,KAAKlB,IAAI0C,UAAS,EACvE8L,IAAMtN,KAAKiC,cAAgB4F,IAAO7H,KAAKwC,cAAgBxC,KAAKlB,IAAI2C,WAAU,EAC1E6L,IAAMtN,KAAK+B,aAAe8F,IAAO7H,KAAKsC,aAAetC,KAAKlB,IAAI+M,UAAS,EACvEyB,IAAMtN,KAAKkC,eAAiB2F,IAAO7H,KAAKyC,eAAiBzC,KAAKlB,IAAIgN,UAAS,EAC3EwB,IAAMtN,KAAKmC,gBAAkB0F,IAAO7H,KAAK0C,kBAAkB1C,KAAKlB,IAAIiN,WAAU,GAEvF/L,KAAKuE,KAAKvE,KAAK8J,eAEvBtK,EAxvBA,GA0vBAC,EAAA,WASA,OAHI,SAAmB3B,GAJZkC,KAAAsG,MAAc,EACdtG,KAAAqG,KAAa,EACbrG,KAAAwG,OAAe,EAGlBxG,KAAKlC,KAAKA,GAPlB,GAWA4B,EAAA,WAUI,SAAAA,IACIM,KAAKgJ,QAcb,OAXItJ,EAAAP,UAAA6J,MAAA,WACIhJ,KAAK0L,SAAQ,EACb1L,KAAK6L,UAAS,EACd7L,KAAKyB,WAAU,EACfzB,KAAKwB,UAAS,EACdxB,KAAK+L,WAAU,EACf/L,KAAK8L,UAAS,EACd9L,KAAK4J,MAAK,EACV5J,KAAK2L,OAAM,GAGnBjM,EAzBA","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo\r\n} from \"babylonjs\"\r\n\r\nexport class CharacterController {\r\n\r\n    private avatar: Mesh;\r\n    private skeleton: Skeleton;\r\n    private camera: ArcRotateCamera;\r\n    private scene: Scene;\r\n\r\n    //avatar speed in meters/second\r\n    private walkSpeed: number=3;\r\n    private runSpeed: number=this.walkSpeed*2;\r\n    private backSpeed: number=this.walkSpeed/2;\r\n    private jumpSpeed: number=this.walkSpeed*2;\r\n    private leftSpeed: number=this.walkSpeed/2;\r\n    private rightSpeed: number=this.walkSpeed/2;\r\n    private gravity: number=9.8;\r\n    //slopeLimit in degrees\r\n    private minSlopeLimit: number=30;\r\n    private maxSlopeLimit: number=45;\r\n    //slopeLimit in radians\r\n    sl: number=Math.PI*this.minSlopeLimit/180;\r\n    sl2: number=Math.PI*this.maxSlopeLimit/180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number=0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number=0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3=new Vector3(0,0,0);\r\n\r\n    //animations\r\n    private walk: AnimData=new AnimData(\"walk\");\r\n    private walkBack: AnimData=new AnimData(\"walkBack\");\r\n    private idle: AnimData=new AnimData(\"idle\");\r\n    private idleJump: AnimData=new AnimData(\"idleJump\");\r\n    private run: AnimData=new AnimData(\"run\");\r\n    private runJump: AnimData=new AnimData(\"runJump\");\r\n    private fall: AnimData=new AnimData(\"fall\");\r\n    private turnLeft: AnimData=new AnimData(\"turnLeft\");\r\n    private turnRight: AnimData=new AnimData(\"turnRight\");\r\n    private strafeLeft: AnimData=new AnimData(\"strafeLeft\");\r\n    private strafeRight: AnimData=new AnimData(\"strafeRight\");\r\n    private slideBack: AnimData=new AnimData(\"slideBack\");\r\n\r\n    private anims: AnimData[]=[this.walk,this.walkBack,this.idle,this.run,this.runJump,this.fall,this.turnLeft,this.turnRight,this.strafeLeft,this.strafeRight,this.slideBack];\r\n\r\n    //move keys\r\n    private walkKey: string=\"W\";\r\n    private walkBackKey: string=\"S\";\r\n    private turnLeftKey: string=\"A\";\r\n    private turnRightKey: string=\"D\";\r\n    private strafeLeftKey: string=\"Q\";\r\n    private strafeRightKey: string=\"E\";\r\n    private jumpKey: string=\"32\";\r\n    private walkCode: number=38;\r\n    private walkBackCode: number=40;\r\n    private turnLeftCode: number=37;\r\n    private turnRightCode: number=39;\r\n    private strafeLeftCode: number=0;\r\n    private strafeRightCode: number=0;\r\n    private jumpCode: number=32;\r\n\r\n    private elasticCamera: boolean=true;\r\n    private cameraTarget: Vector3=new Vector3(0,0,0);\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private noFirstPerson: boolean=false;\r\n\r\n    public setAvatar(avatar: Mesh) {\r\n        this.avatar=avatar;\r\n    }\r\n\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this.skeleton=skeleton;\r\n        this.checkAnims(skeleton);\r\n    }\r\n\r\n    public setSlopeLimit(minSlopeLimit: number,maxSlopeLimit: number) {\r\n        this.minSlopeLimit=minSlopeLimit;\r\n        this.maxSlopeLimit=maxSlopeLimit;\r\n\r\n        this.sl=Math.PI*minSlopeLimit/180;\r\n        this.sl2=Math.PI*this.maxSlopeLimit/180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset=stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this.walkSpeed=n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this.runSpeed=n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this.backSpeed=n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this.jumpSpeed=n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this.leftSpeed=n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this.rightSpeed=n;\r\n    }\r\n    public setGravity(n: number) {\r\n        this.gravity=n;\r\n    }\r\n\r\n    public setAnim(anim: AnimData,rangeName: string,rate: number,loop: boolean) {\r\n        if(this.skeleton==null) return;\r\n        anim.name=rangeName;\r\n        anim.rate=rate;\r\n        anim.loop=loop;\r\n        if(this.skeleton.getAnimationRange(anim.name)!=null) {\r\n            anim.exist=true;\r\n        } else {\r\n            anim.exist=false;\r\n        }\r\n    }\r\n\r\n    public setWalkAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.walk,rangeName,rate,loop);\r\n    }\r\n    public setRunAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.run,rangeName,rate,loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.walkBack,rangeName,rate,loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.slideBack,rangeName,rate,loop);\r\n    }\r\n    public setIdleAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.idle,rangeName,rate,loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.turnRight,rangeName,rate,loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.turnLeft,rangeName,rate,loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.strafeRight,rangeName,rate,loop);\r\n    }\r\n    public setSrafeLeftAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.strafeLeft,rangeName,rate,loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.idleJump,rangeName,rate,loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.runJump,rangeName,rate,loop);\r\n    }\r\n    public setFallAnim(rangeName: string,rate: number,loop: boolean) {\r\n        this.setAnim(this.fall,rangeName,rate,loop);\r\n    }\r\n\r\n    public setWalkKey(key: string) {\r\n        this.walkKey=key\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this.walkBackKey=key\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this.turnLeftKey=key\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this.turnRightKey=key\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this.strafeLeftKey=key\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this.strafeRightKey=key\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this.jumpKey=key\r\n    }\r\n\r\n    public setWalkCode(code: number) {\r\n        this.walkCode=code\r\n    }\r\n    public setWalkBackCode(code: number) {\r\n        this.walkBackCode=code\r\n    }\r\n    public setTurnLeftCode(code: number) {\r\n        this.turnLeftCode=code\r\n    }\r\n    public setTurnRightCode(code: number) {\r\n        this.turnRightCode=code\r\n    }\r\n    public setStrafeLeftCode(code: number) {\r\n        this.strafeLeftCode=code\r\n    }\r\n    public setStrafeRightCode(code: number) {\r\n        this.strafeRightCode=code\r\n    }\r\n    public setJumpCode(code: number) {\r\n        this.jumpCode=code\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this.elasticCamera=b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this.cameraTarget.copyFrom(v);\r\n    }\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this.savedCameraCollision=this.camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this.noFirstPerson=b;\r\n    }\r\n\r\n    private checkAnims(skel: Skeleton) {\r\n        for(let anim of this.anims) {\r\n            if(skel.getAnimationRange(anim.name)!=null) anim.exist=true;\r\n        }\r\n    }\r\n\r\n    private key: Key;\r\n    private renderer: () => void;\r\n    private handleKeyUp: (e) => void;\r\n    private handleKeyDown: (e) => void;\r\n    private _ellipsoid: Vector3;\r\n    constructor(avatar: Mesh,camera: ArcRotateCamera,scene: Scene) {\r\n\r\n        this.avatar=avatar;\r\n        this.scene=scene;\r\n        this._ellipsoid=this.avatar.ellipsoid.clone();\r\n\r\n        this.skeleton=avatar.skeleton;\r\n        if(this.skeleton!=null) this.checkAnims(this.skeleton);\r\n        this.camera=camera;\r\n        this.savedCameraCollision=this.camera.checkCollisions;\r\n\r\n        this.key=new Key();\r\n\r\n       \r\n        this.renderer=() => {this.moveAVandCamera()};\r\n        this.handleKeyUp=(e) => {this.onKeyUp(e)};\r\n        this.handleKeyDown=(e) => {this.onKeyDown(e)};\r\n\r\n        window.addEventListener(\"keyup\",this.handleKeyUp,false);\r\n        window.addEventListener(\"keydown\",this.handleKeyDown,false);\r\n        \r\n\r\n    }\r\n\r\n    private started: boolean=false;\r\n    public start() {\r\n        if(this.started) return;\r\n        this.started=true;\r\n        this.key.reset();\r\n        this.movFallTime=0;\r\n        //first time we enter render loop, delta time shows zero !!\r\n        this.idleFallTime=0.001;\r\n        this.grounded=false;\r\n        this.updateTargetValue();\r\n\r\n        window.addEventListener(\"keyup\",this.handleKeyUp,false);\r\n        window.addEventListener(\"keydown\",this.handleKeyDown,false);\r\n        \r\n        this.scene.registerBeforeRender(this.renderer);\r\n        this.scene\r\n    }\r\n\r\n    public stop() {\r\n        if(!this.started) return;\r\n        this.started=false;\r\n        this.scene.unregisterBeforeRender(this.renderer);\r\n        window.removeEventListener(\"keyup\",this.handleKeyUp,false);\r\n        window.removeEventListener(\"keydown\",this.handleKeyDown,false);\r\n        \r\n        this.prevAnim=null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean=false;\r\n    public pauseAnim() {\r\n        this._stopAnim=true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim=false;\r\n    }\r\n\r\n    private prevAnim: AnimData=null;\r\n\r\n    private avStartPos: Vector3=new Vector3(0,0,0);\r\n    private grounded: boolean=false;\r\n    //distance by which AV would move down if in freefall\r\n    private freeFallDist: number=0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private fallFrameCountMin: number=50;\r\n    private fallFrameCount: number=0;\r\n\r\n    private inFreeFall: boolean=false;\r\n    private wasWalking: boolean=false;\r\n    private wasRunning: boolean=false;\r\n    private moveVector: Vector3;\r\n\r\n    private moveAVandCamera() {\r\n        this.avStartPos.copyFrom(this.avatar.position);\r\n        let anim: AnimData=null;\r\n        let dt: number=this.scene.getEngine().getDeltaTime()/1000;\r\n\r\n        if(this.key.jump&&!this.inFreeFall) {\r\n            this.grounded=false;\r\n            this.idleFallTime=0;\r\n\r\n            anim=this.doJump(dt);\r\n        } else if(this.anyMovement()||this.inFreeFall) {\r\n            this.grounded=false;\r\n            this.idleFallTime=0;\r\n\r\n            anim=this.doMove(dt);\r\n        } else if(!this.inFreeFall) {\r\n\r\n            anim=this.doIdle(dt);\r\n        }\r\n        if(!this._stopAnim) {\r\n            if(anim!=null) {\r\n                if(this.skeleton!==null) {\r\n                    if(this.prevAnim!==anim) {\r\n                        if(anim.exist) {\r\n                            this.skeleton.beginAnimation(anim.name,anim.loop,anim.rate);\r\n                        }\r\n                        this.prevAnim=anim;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private jumpStartPosY: number=0;\r\n    //for how long the AV has been in the jump\r\n    private jumpTime: number=0;\r\n    private doJump(dt: number): AnimData {\r\n\r\n        let anim: AnimData=null;\r\n        anim=this.runJump;\r\n        if(this.jumpTime===0) {\r\n            this.jumpStartPosY=this.avatar.position.y;\r\n        }\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        let js: number=this.jumpSpeed-this.gravity*this.jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number=js*dt-0.5*this.gravity*dt*dt;\r\n        this.jumpTime=this.jumpTime+dt;\r\n\r\n        let forwardDist: number=0;\r\n        let disp: Vector3;\r\n        this.avatar.rotation.y=-4.69-this.camera.alpha;\r\n        if(this.wasRunning||this.wasWalking) {\r\n            if(this.wasRunning) {\r\n                forwardDist=this.runSpeed*dt;\r\n            } else if(this.wasWalking) {\r\n                forwardDist=this.walkSpeed*dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp=this.moveVector.clone();\r\n            disp.y=0;\r\n            disp=disp.normalize();\r\n            disp.scaleToRef(forwardDist,disp);\r\n            disp.y=jumpDist;\r\n        } else {\r\n            disp=new Vector3(0,jumpDist,0);\r\n            anim=this.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this.avatar.moveWithCollisions(disp);\r\n        if(jumpDist<0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //anim=this.fall;\r\n            //check if going up a slope or back on flat ground \r\n            if((this.avatar.position.y>this.avStartPos.y)||((this.avatar.position.y===this.avStartPos.y)&&(disp.length()>0.001))) {\r\n                this.endJump();\r\n            } else if(this.avatar.position.y<this.jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                let actDisp: Vector3=this.avatar.position.subtract(this.avStartPos);\r\n                if(!(this.areVectorsEqual(actDisp,disp,0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if(this.verticalSlope(actDisp)<=this.sl) {\r\n                        this.endJump();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private endJump() {\r\n        this.key.jump=false;\r\n        this.jumpTime=0;\r\n        this.wasWalking=false;\r\n        this.wasRunning=false;\r\n\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private areVectorsEqual(v1: Vector3,v2: Vector3,p: number) {\r\n        return ((Math.abs(v1.x-v2.x)<p)&&(Math.abs(v1.y-v2.y)<p)&&(Math.abs(v1.z-v2.z)<p));\r\n    }\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y/Math.sqrt(v.x*v.x+v.z*v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private movFallTime: number=0;\r\n\r\n    private doMove(dt: number): AnimData {\r\n\r\n        //initial down velocity\r\n        let u: number=this.movFallTime*this.gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this.freeFallDist=u*dt+this.gravity*dt*dt/2;\r\n\r\n        this.movFallTime=this.movFallTime+dt;\r\n\r\n        let moving: boolean=false;\r\n        let anim: AnimData=null;\r\n\r\n        if(this.inFreeFall) {\r\n            this.moveVector.y=-this.freeFallDist;\r\n            moving=true;\r\n        } else {\r\n            this.wasWalking=false;\r\n            this.wasRunning=false;\r\n\r\n            if(this.key.forward) {\r\n                let forwardDist: number=0;\r\n                if(this.key.shift) {\r\n                    this.wasRunning=true;\r\n                    forwardDist=this.runSpeed*dt;\r\n                    anim=this.run;\r\n                } else {\r\n                    this.wasWalking=true;\r\n                    forwardDist=this.walkSpeed*dt;\r\n                    anim=this.walk;\r\n                }\r\n                this.moveVector=this.avatar.calcMovePOV(0,-this.freeFallDist,forwardDist);\r\n                moving=true;\r\n            } else if(this.key.backward) {\r\n                this.moveVector=this.avatar.calcMovePOV(0,-this.freeFallDist,-(this.backSpeed*dt));\r\n                anim=this.walkBack;\r\n                moving=true;\r\n            } else if(this.key.stepLeft) {\r\n                anim=this.strafeLeft;\r\n                this.moveVector=this.avatar.calcMovePOV(-(this.leftSpeed*dt),-this.freeFallDist,0);\r\n                moving=true;\r\n            } else if(this.key.stepRight) {\r\n                anim=this.strafeRight;\r\n                this.moveVector=this.avatar.calcMovePOV((this.rightSpeed*dt),-this.freeFallDist,0);\r\n                moving=true;\r\n            }\r\n        }\r\n\r\n        if(!this.key.stepLeft&&!this.key.stepRight) {\r\n            if(this.key.turnLeft) {\r\n                this.camera.alpha=this.camera.alpha+0.022;\r\n                if(!moving) {\r\n                    this.avatar.rotation.y=-4.69-this.camera.alpha;\r\n                    anim=this.turnLeft;\r\n                }\r\n            } else if(this.key.turnRight) {\r\n                this.camera.alpha=this.camera.alpha-0.022;\r\n                if(!moving) {\r\n                    this.avatar.rotation.y=-4.69-this.camera.alpha;\r\n                    anim=this.turnRight;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(moving) {\r\n            this.avatar.rotation.y=-4.69-this.camera.alpha;\r\n\r\n            if(this.moveVector.length()>0.001) {\r\n                this.avatar.moveWithCollisions(this.moveVector);\r\n                //walking up a slope\r\n                if(this.avatar.position.y>this.avStartPos.y) {\r\n                    let actDisp: Vector3=this.avatar.position.subtract(this.avStartPos);\r\n                    let _sl: number=this.verticalSlope(actDisp);\r\n                    if(_sl>=this.sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if(this._stepOffset>0) {\r\n                            if(this._vMoveTot==0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this.avStartPos);\r\n                            }\r\n                            this._vMoveTot=this._vMoveTot+(this.avatar.position.y-this.avStartPos.y);\r\n                            if(this._vMoveTot>this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot=0;\r\n                                this.avatar.position.copyFrom(this._vMovStartPos);\r\n                                this.endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this.avatar.position.copyFrom(this.avStartPos);\r\n                            this.endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot=0;\r\n                        if(_sl>this.sl) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this.fallFrameCount=0;\r\n                            this.inFreeFall=false;\r\n                        } else {\r\n                            //continue walking\r\n                            this.endFreeFall();\r\n                        }\r\n                    }\r\n                } else if((this.avatar.position.y)<this.avStartPos.y) {\r\n                    let actDisp: Vector3=this.avatar.position.subtract(this.avStartPos);\r\n                    if(!(this.areVectorsEqual(actDisp,this.moveVector,0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if(this.verticalSlope(actDisp)<=this.sl) {\r\n                            this.endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this.fallFrameCount=0;\r\n                            this.inFreeFall=false;\r\n                        }\r\n                    } else {\r\n                        this.inFreeFall=true;\r\n                        this.fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if(this.fallFrameCount>this.fallFrameCountMin) {\r\n                            anim=this.fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private endFreeFall(): void {\r\n        this.movFallTime=0;\r\n        this.fallFrameCount=0;\r\n        this.inFreeFall=false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private idleFallTime: number=0;\r\n    private doIdle(dt: number): AnimData {\r\n        if(this.grounded) {\r\n            return this.idle;\r\n        }\r\n        this.wasWalking=false;\r\n        this.wasRunning=false;\r\n        this.movFallTime=0;\r\n        let anim: AnimData=this.idle;\r\n        this.fallFrameCount=0;\r\n\r\n\r\n        if(dt===0) {\r\n            this.freeFallDist=5;\r\n        } else {\r\n            let u: number=this.idleFallTime*this.gravity\r\n            this.freeFallDist=u*dt+this.gravity*dt*dt/2;\r\n            this.idleFallTime=this.idleFallTime+dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if(this.freeFallDist<0.01) return anim;\r\n        let disp: Vector3=new Vector3(0,-this.freeFallDist,0);;\r\n        this.avatar.rotation.y=-4.69-this.camera.alpha;\r\n        this.avatar.moveWithCollisions(disp);\r\n        if((this.avatar.position.y>this.avStartPos.y)||(this.avatar.position.y===this.avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this.groundIt();\r\n        } else if(this.avatar.position.y<this.avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            let actDisp: Vector3=this.avatar.position.subtract(this.avStartPos);\r\n            if(!(this.areVectorsEqual(actDisp,disp,0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if(this.verticalSlope(actDisp)<=this.sl) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this.groundIt();\r\n                    this.avatar.position.copyFrom(this.avStartPos);\r\n                } else {\r\n                    this.unGroundIt();\r\n                    anim=this.slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private groundFrameCount=0;\r\n    private groundFrameMax=10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private groundIt(): void {\r\n        this.groundFrameCount++;\r\n        if(this.groundFrameCount>this.groundFrameMax) {\r\n            this.grounded=true;\r\n            this.idleFallTime=0;\r\n        }\r\n    }\r\n    private unGroundIt() {\r\n        this.grounded=false;\r\n        this.groundFrameCount=0;\r\n    }\r\n\r\n    savedCameraCollision: boolean=true;\r\n    private updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if(this._vMoveTot==0)\r\n            this.avatar.position.addToRef(this.cameraTarget,this.camera.target);\r\n\r\n        if(this.camera.radius>this.camera.lowerRadiusLimit) {if(this.elasticCamera) this.snapCamera();}\r\n\r\n        if(this.camera.radius<=this.camera.lowerRadiusLimit) {\r\n            if(!this.noFirstPerson) {\r\n                this.avatar.visibility=0;\r\n                this.camera.checkCollisions=false;\r\n            }\r\n        } else {\r\n            this.avatar.visibility=1;\r\n            this.camera.checkCollisions=this.savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    ray: Ray=new Ray(Vector3.Zero(),Vector3.One(),1);\r\n    rayDir: Vector3=Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    cameraSkin: number=0.5;\r\n    skip: number=0;\r\n    private snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this.camera.position.subtractToRef(this.camera.target,this.rayDir);\r\n        //start ray from av to camera\r\n        this.ray.origin=this.camera.target;\r\n        this.ray.length=this.rayDir.length();\r\n        this.ray.direction=this.rayDir.normalize();\r\n\r\n        let pi: PickingInfo=this.scene.pickWithRay(this.ray,(mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if(mesh==this.avatar||!mesh.checkCollisions) return false;\r\n            else return true;\r\n        },true);\r\n\r\n        if(pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if(this.camera.checkCollisions) {\r\n                let newPos: Vector3=this.camera.target.subtract(pi.pickedPoint).normalize().scale(this.cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos,this.camera.position);\r\n            } else {\r\n                let nr: number=pi.pickedPoint.subtract(this.camera.target).length();\r\n                this.camera.radius=nr-this.cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    move: boolean=false;\r\n    public anyMovement(): boolean {\r\n        return (this.key.forward||this.key.backward||this.key.turnLeft||this.key.turnRight||this.key.stepLeft||this.key.stepRight);\r\n    }\r\n\r\n    private onKeyDown(e: Event) {\r\n        var event: KeyboardEvent=<KeyboardEvent>e;\r\n        var code: number=event.keyCode;\r\n        var chr: string=String.fromCharCode(code);\r\n\r\n        if((chr===this.jumpKey)||(code===this.jumpCode)) this.key.jump=true;\r\n        else if(code===16) this.key.shift=true;\r\n        //WASD or arrow keys\r\n        else if((chr===this.walkKey)||(code===this.walkCode)) this.key.forward=true;\r\n        else if((chr===this.turnLeftKey)||(code===this.turnLeftCode)) this.key.turnLeft=true;\r\n        else if((chr===this.turnRightKey)||(code===this.turnRightCode)) this.key.turnRight=true;\r\n        else if((chr===this.walkBackKey)||(code===this.walkBackCode)) this.key.backward=true;\r\n        else if((chr===this.strafeLeftKey)||(code===this.strafeLeftCode)) this.key.stepLeft=true;\r\n        else if((chr===this.strafeRightKey)||(code===this.strafeRightCode)) this.key.stepRight=true;\r\n        this.move=this.anyMovement();\r\n    }\r\n\r\n    private onKeyUp(e: Event) {\r\n        var event: KeyboardEvent=<KeyboardEvent>e;\r\n        var code: number=event.keyCode;\r\n        var chr: string=String.fromCharCode(code);\r\n\r\n        if(code===16) {this.key.shift=false;}\r\n        //WASD or arrow keys\r\n        else if((chr===this.walkKey)||(code===this.walkCode)) this.key.forward=false;\r\n        else if((chr===this.turnLeftKey)||(code===this.turnLeftCode)) this.key.turnLeft=false;\r\n        else if((chr===this.turnRightKey)||(code===this.turnRightCode)) this.key.turnRight=false;\r\n        else if((chr===this.walkBackKey)||(code===this.walkBackCode)) this.key.backward=false;\r\n        else if((chr===this.strafeLeftKey)||(code===this.strafeLeftCode)) this.key.stepLeft=false;\r\n        else if((chr===this.strafeRightKey)||(code===this.strafeRightCode)) this.key.stepRight=false;\r\n\r\n        this.move=this.anyMovement();\r\n    }\r\n}\r\n\r\nexport class AnimData {\r\n    public name: string;\r\n    public loop: boolean=true;\r\n    public rate: number=1;\r\n    public exist: boolean=false;\r\n\r\n    public constructor(name: string) {\r\n        this.name=name;\r\n    }\r\n}\r\n\r\nexport class Key {\r\n    public forward: boolean;\r\n    public backward: boolean;\r\n    public turnRight: boolean;\r\n    public turnLeft: boolean;\r\n    public stepRight: boolean;\r\n    public stepLeft: boolean;\r\n    public jump: boolean;\r\n    public shift: boolean;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this.forward=false;\r\n        this.backward=false;\r\n        this.turnRight=false;\r\n        this.turnLeft=false;\r\n        this.stepRight=false;\r\n        this.stepLeft=false;\r\n        this.jump=false;\r\n        this.shift=false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}