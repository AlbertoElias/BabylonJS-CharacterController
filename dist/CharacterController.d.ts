import { Skeleton, ArcRotateCamera, Vector3, Mesh, Scene, Ray } from "babylonjs";
export declare class CharacterController {
    private avatar;
    private skeleton;
    private camera;
    private scene;
    private walkSpeed;
    private runSpeed;
    private backSpeed;
    private jumpSpeed;
    private leftSpeed;
    private rightSpeed;
    private gravity;
    private minSlopeLimit;
    private maxSlopeLimit;
    sl: number;
    sl2: number;
    private _stepOffset;
    private _vMoveTot;
    private _vMovStartPos;
    private walk;
    private walkBack;
    private idle;
    private idleJump;
    private run;
    private runJump;
    private fall;
    private turnLeft;
    private turnRight;
    private strafeLeft;
    private strafeRight;
    private slideBack;
    private anims;
    private walkKey;
    private walkBackKey;
    private turnLeftKey;
    private turnRightKey;
    private strafeLeftKey;
    private strafeRightKey;
    private jumpKey;
    private walkCode;
    private walkBackCode;
    private turnLeftCode;
    private turnRightCode;
    private strafeLeftCode;
    private strafeRightCode;
    private jumpCode;
    private elasticCamera;
    private cameraTarget;
    private noFirstPerson;
    setAvatar(avatar: Mesh): void;
    setAvatarSkeleton(skeleton: Skeleton): void;
    setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number): void;
    setStepOffset(stepOffset: number): void;
    setWalkSpeed(n: number): void;
    setRunSpeed(n: number): void;
    setBackSpeed(n: number): void;
    setJumpSpeed(n: number): void;
    setLeftSpeed(n: number): void;
    setRightSpeed(n: number): void;
    setGravity(n: number): void;
    setAnim(anim: AnimData, rangeName: string, rate: number, loop: boolean): void;
    setWalkAnim(rangeName: string, rate: number, loop: boolean): void;
    setRunAnim(rangeName: string, rate: number, loop: boolean): void;
    setWalkBackAnim(rangeName: string, rate: number, loop: boolean): void;
    setSlideBackAnim(rangeName: string, rate: number, loop: boolean): void;
    setIdleAnim(rangeName: string, rate: number, loop: boolean): void;
    setTurnRightAnim(rangeName: string, rate: number, loop: boolean): void;
    setTurnLeftAnim(rangeName: string, rate: number, loop: boolean): void;
    setStrafeRightAnim(rangeName: string, rate: number, loop: boolean): void;
    setSrafeLeftAnim(rangeName: string, rate: number, loop: boolean): void;
    setIdleJumpAnim(rangeName: string, rate: number, loop: boolean): void;
    setRunJumpAnim(rangeName: string, rate: number, loop: boolean): void;
    setFallAnim(rangeName: string, rate: number, loop: boolean): void;
    setWalkKey(key: string): void;
    setWalkBackKey(key: string): void;
    setTurnLeftKey(key: string): void;
    setTurnRightKey(key: string): void;
    setStrafeLeftKey(key: string): void;
    setStrafeRightKey(key: string): void;
    setJumpKey(key: string): void;
    setWalkCode(code: number): void;
    setWalkBackCode(code: number): void;
    setTurnLeftCode(code: number): void;
    setTurnRightCode(code: number): void;
    setStrafeLeftCode(code: number): void;
    setStrafeRightCode(code: number): void;
    setJumpCode(code: number): void;
    setCameraElasticity(b: boolean): void;
    setCameraTarget(v: Vector3): void;
    cameraCollisionChanged(): void;
    setNoFirstPerson(b: boolean): void;
    private checkAnims;
    private key;
    private renderer;
    private _ellipsoid;
    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene);
    private started;
    start(): void;
    stop(): void;
    private _stopAnim;
    pauseAnim(): void;
    resumeAnim(): void;
    private prevAnim;
    private avStartPos;
    private grounded;
    private freeFallDist;
    private fallFrameCountMin;
    private fallFrameCount;
    private inFreeFall;
    private wasWalking;
    private wasRunning;
    private moveVector;
    private moveAVandCamera;
    private jumpStartPosY;
    private jumpTime;
    private doJump;
    private endJump;
    private areVectorsEqual;
    private verticalSlope;
    private movFallTime;
    private doMove;
    private endFreeFall;
    private idleFallTime;
    private doIdle;
    private groundFrameCount;
    private groundFrameMax;
    private groundIt;
    private unGroundIt;
    savedCameraCollision: boolean;
    private updateTargetValue;
    ray: Ray;
    rayDir: Vector3;
    cameraSkin: number;
    skip: number;
    private snapCamera;
    move: boolean;
    anyMovement(): boolean;
    private onKeyDown;
    private onKeyUp;
}
export declare class AnimData {
    name: string;
    loop: boolean;
    rate: number;
    exist: boolean;
    constructor(name: string);
}
export declare class Key {
    forward: boolean;
    backward: boolean;
    turnRight: boolean;
    turnLeft: boolean;
    stepRight: boolean;
    stepLeft: boolean;
    jump: boolean;
    shift: boolean;
    constructor();
    reset(): void;
}
