declare namespace org.ssatguru.babylonjs.component {
    import Skeleton = BABYLON.Skeleton;
    import ArcRotateCamera = BABYLON.ArcRotateCamera;
    import Vector3 = BABYLON.Vector3;
    import Mesh = BABYLON.Mesh;
    import Scene = BABYLON.Scene;
    import Ray = BABYLON.Ray;
    class CharacterControl {
        avatarSkeleton: Skeleton;
        camera: ArcRotateCamera;
        avatar: Mesh;
        key: Key;
        scene: Scene;
        slopeLimit: number;
        maxSlopeLimit: number;
        sl: number;
        sl2: number;
        private renderer;
        constructor(avatar: Mesh, avatarSkeleton: Skeleton, camera: ArcRotateCamera, scene: Scene);
        setAvatar(avatar: Mesh): void;
        setAvatarSkeleton(avatarSkeleton: Skeleton): void;
        setSlopeLimit(slopeLimit: number): void;
        setWalkSpeed(n: number): void;
        setRunSpeed(n: number): void;
        setBackSpeed(n: number): void;
        setJumpSpeed(n: number): void;
        setLeftSpeed(n: number): void;
        setRightSpeed(n: number): void;
        private started;
        start(): void;
        stop(): void;
        private walk;
        private walkBack;
        private slideBack;
        private idle;
        private run;
        private jump;
        private fall;
        private turnLeft;
        private turnRight;
        private strafeLeft;
        private strafeRight;
        private initAnims();
        private walkSpeed;
        private runSpeed;
        private backSpeed;
        private jumpSpeed;
        private leftSpeed;
        private rightSpeed;
        private prevAnim;
        private gravity;
        private avStartPos;
        private grounded;
        private freeFallDist;
        private fallFrameCountMin;
        private fallFrameCount;
        private inFreeFall;
        private wasWalking;
        private wasRunning;
        private moveVector;
        private moveAVandCamera();
        private jumpStartPosY;
        private jumpTime;
        private doJump(dt);
        private endJump();
        private areVectorsEqual(v1, v2, p);
        private verticalSlope(v);
        private movFallTime;
        private doMove(dt);
        private endFreeFall();
        private idleFallTime;
        private doIdle(dt);
        private groundFrameCount;
        private groundFrameMax;
        private groundIt();
        private unGroundIt();
        private updateTargetValue();
        ray: Ray;
        rayDir: Vector3;
        private bounceCamera();
        move: boolean;
        private onKeyDown(e);
        anyMovement(): boolean;
        private onKeyUp(e);
        private horizontalMove(v1, v2);
    }
    class AnimData {
        name: string;
        l: boolean;
        r: number;
        exist: boolean;
        constructor(name: string, l: boolean, r: number, e: boolean);
    }
    class Key {
        forward: boolean;
        backward: boolean;
        turnRight: boolean;
        turnLeft: boolean;
        stepRight: boolean;
        stepLeft: boolean;
        jump: boolean;
        shift: boolean;
        constructor();
        reset(): void;
    }
}
