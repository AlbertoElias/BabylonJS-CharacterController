declare namespace org.ssatguru.babylonjs.component {
    import Skeleton = BABYLON.Skeleton;
    import ArcRotateCamera = BABYLON.ArcRotateCamera;
    import Vector3 = BABYLON.Vector3;
    import Mesh = BABYLON.Mesh;
    import Scene = BABYLON.Scene;
    import Ray = BABYLON.Ray;
    class CharacterControl {
        private avatar;
        private avatarSkeleton;
        private camera;
        private scene;
        private walkSpeed;
        private runSpeed;
        private backSpeed;
        private jumpSpeed;
        private leftSpeed;
        private rightSpeed;
        private gravity;
        private minSlopeLimit;
        private maxSlopeLimit;
        sl: number;
        sl2: number;
        private walk;
        private walkBack;
        private slideBack;
        private idle;
        private run;
        private jump;
        private fall;
        private turnLeft;
        private turnRight;
        private strafeLeft;
        private strafeRight;
        private walkKey;
        private walkBackKey;
        private turnLeftKey;
        private turnRightKey;
        private strafeLeftKey;
        private strafeRightKey;
        private jumpKey;
        private walkCode;
        private walkBackCode;
        private turnLeftCode;
        private turnRightCode;
        private strafeLeftCode;
        private strafeRightCode;
        private jumpCode;
        private elasticCamera;
        setAvatar(avatar: Mesh): void;
        setAvatarSkeleton(avatarSkeleton: Skeleton): void;
        setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number): void;
        setWalkSpeed(n: number): void;
        setRunSpeed(n: number): void;
        setBackSpeed(n: number): void;
        setJumpSpeed(n: number): void;
        setLeftSpeed(n: number): void;
        setRightSpeed(n: number): void;
        setGravity(n: number): void;
        setWalkAnim(rangeName: string, rate: number): void;
        setRunAnim(rangeName: string, rate: number): void;
        setWalkBackAnim(rangeName: string, rate: number): void;
        setSlideBackAnim(rangeName: string, rate: number): void;
        setIdleAnim(rangeName: string, rate: number): void;
        setStrafeRightAnim(rangeName: string, rate: number): void;
        setSrafeLeftAnim(rangeName: string, rate: number): void;
        setJumpAnim(rangeName: string, rate: number): void;
        setFallAnim(rangeName: string, rate: number): void;
        setWalkKey(key: string): void;
        setWalkBackKey(key: string): void;
        setTurnLeftKey(key: string): void;
        setTurnRightKey(key: string): void;
        setStrafeLeftKey(key: string): void;
        setStrafeRightKey(key: string): void;
        setJumpKey(key: string): void;
        setWalkCode(code: number): void;
        setWalkBackCode(code: number): void;
        setTurnLeftCode(code: number): void;
        setTurnRightCode(code: number): void;
        setStrafeLeftCode(code: number): void;
        setStrafeRightCode(code: number): void;
        setJumpCode(code: number): void;
        setCameraElastic(b: boolean): void;
        private initAnims(skel);
        private key;
        private renderer;
        constructor(avatar: Mesh, avatarSkeleton: Skeleton, camera: ArcRotateCamera, scene: Scene);
        private started;
        start(): void;
        stop(): void;
        private prevAnim;
        private avStartPos;
        private grounded;
        private freeFallDist;
        private fallFrameCountMin;
        private fallFrameCount;
        private inFreeFall;
        private wasWalking;
        private wasRunning;
        private moveVector;
        private moveAVandCamera();
        private jumpStartPosY;
        private jumpTime;
        private doJump(dt);
        private endJump();
        private areVectorsEqual(v1, v2, p);
        private verticalSlope(v);
        private movFallTime;
        private doMove(dt);
        private endFreeFall();
        private idleFallTime;
        private doIdle(dt);
        private groundFrameCount;
        private groundFrameMax;
        private groundIt();
        private unGroundIt();
        private updateTargetValue();
        ray: Ray;
        rayDir: Vector3;
        private snapCamera();
        move: boolean;
        anyMovement(): boolean;
        private onKeyDown(e);
        private onKeyUp(e);
        private horizontalMove(v1, v2);
    }
    class AnimData {
        name: string;
        loop: boolean;
        rate: number;
        exist: boolean;
        constructor(name: string, loop: boolean, rate: number, exist: boolean);
    }
    class Key {
        forward: boolean;
        backward: boolean;
        turnRight: boolean;
        turnLeft: boolean;
        stepRight: boolean;
        stepLeft: boolean;
        jump: boolean;
        shift: boolean;
        constructor();
        reset(): void;
    }
}
